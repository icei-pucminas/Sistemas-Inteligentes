{"version":3,"file":"AvroReadableFromBlob.js","sourceRoot":"","sources":["../../../../storage-internal-avro/src/AvroReadableFromBlob.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,OAAO,EAAE,YAAY,EAA2B,MAAM,gBAAgB,CAAC;AACvE,OAAO,EAAE,UAAU,EAAE,MAAM,yBAAyB,CAAC;AAErD,IAAM,WAAW,GAAG,IAAI,UAAU,CAAC,yCAAyC,CAAC,CAAC;AAE9E;IAA0C,wCAAY;IAIpD,8BAAY,IAAU;QAAtB,YACE,iBAAO,SAGR;QAFC,KAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,KAAI,CAAC,SAAS,GAAG,CAAC,CAAC;;IACrB,CAAC;IAED,sBAAW,0CAAQ;aAAnB;YACE,OAAO,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;;;OAAA;IAEY,mCAAI,GAAjB,UAAkB,IAAY,EAAE,OAAqC;QAArC,wBAAA,EAAA,YAAqC;;;;;gBACnE,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;gBACxD,IAAI,IAAI,IAAI,CAAC,EAAE;oBACb,sBAAO,IAAI,UAAU,EAAE,EAAC;iBACzB;gBAEK,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;gBACpC,sBAAO,IAAI,OAAO,CAAa,UAAC,OAAO,EAAE,MAAM;wBAC7C,IAAM,OAAO,GAAG;4BACd,IAAI,OAAO,CAAC,WAAW,EAAE;gCACvB,OAAO,CAAC,WAAY,CAAC,mBAAmB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;6BACjE;wBACH,CAAC,CAAC;wBAEF,IAAM,YAAY,GAAG;4BACnB,UAAU,CAAC,KAAK,EAAE,CAAC;4BACnB,OAAO,EAAE,CAAC;4BACV,MAAM,CAAC,WAAW,CAAC,CAAC;wBACtB,CAAC,CAAC;wBAEF,IAAI,OAAO,CAAC,WAAW,EAAE;4BACvB,OAAO,CAAC,WAAW,CAAC,gBAAgB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;yBAC7D;wBAED,UAAU,CAAC,SAAS,GAAG,UAAC,EAAO;4BAC7B,OAAO,EAAE,CAAC;4BACV,OAAO,CAAC,IAAI,UAAU,CAAC,EAAE,CAAC,MAAO,CAAC,MAAM,CAAC,CAAC,CAAC;wBAC7C,CAAC,CAAC;wBAEF,UAAU,CAAC,OAAO,GAAG;4BACnB,OAAO,EAAE,CAAC;4BACV,MAAM,EAAE,CAAC;wBACX,CAAC,CAAC;wBAEF,UAAU,CAAC,iBAAiB,CAAC,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAI,CAAC,SAAS,EAAE,CAAC,KAAI,CAAC,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;oBAC3F,CAAC,CAAC,EAAC;;;KACJ;IACH,2BAAC;AAAD,CAAC,AAnDD,CAA0C,YAAY,GAmDrD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AvroReadable, AvroReadableReadOptions } from \"./AvroReadable\";\nimport { AbortError } from \"@azure/abort-controller\";\n\nconst ABORT_ERROR = new AbortError(\"Reading from the avro blob was aborted.\");\n\nexport class AvroReadableFromBlob extends AvroReadable {\n  private _position: number;\n  private _blob: Blob;\n\n  constructor(blob: Blob) {\n    super();\n    this._blob = blob;\n    this._position = 0;\n  }\n\n  public get position(): number {\n    return this._position;\n  }\n\n  public async read(size: number, options: AvroReadableReadOptions = {}): Promise<Uint8Array> {\n    size = Math.min(size, this._blob.size - this._position);\n    if (size <= 0) {\n      return new Uint8Array();\n    }\n\n    const fileReader = new FileReader();\n    return new Promise<Uint8Array>((resolve, reject) => {\n      const cleanUp = () => {\n        if (options.abortSignal) {\n          options.abortSignal!.removeEventListener(\"abort\", abortHandler);\n        }\n      };\n\n      const abortHandler = () => {\n        fileReader.abort();\n        cleanUp();\n        reject(ABORT_ERROR);\n      };\n\n      if (options.abortSignal) {\n        options.abortSignal.addEventListener(\"abort\", abortHandler);\n      }\n\n      fileReader.onloadend = (ev: any) => {\n        cleanUp();\n        resolve(new Uint8Array(ev.target!.result));\n      };\n\n      fileReader.onerror = () => {\n        cleanUp();\n        reject();\n      };\n\n      fileReader.readAsArrayBuffer(this._blob.slice(this._position, (this._position += size)));\n    });\n  }\n}\n"]}