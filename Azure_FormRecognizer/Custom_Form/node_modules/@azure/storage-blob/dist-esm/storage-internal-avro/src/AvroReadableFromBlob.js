// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __awaiter, __extends, __generator } from "tslib";
import { AvroReadable } from "./AvroReadable";
import { AbortError } from "@azure/abort-controller";
var ABORT_ERROR = new AbortError("Reading from the avro blob was aborted.");
var AvroReadableFromBlob = /** @class */ (function (_super) {
    __extends(AvroReadableFromBlob, _super);
    function AvroReadableFromBlob(blob) {
        var _this = _super.call(this) || this;
        _this._blob = blob;
        _this._position = 0;
        return _this;
    }
    Object.defineProperty(AvroReadableFromBlob.prototype, "position", {
        get: function () {
            return this._position;
        },
        enumerable: false,
        configurable: true
    });
    AvroReadableFromBlob.prototype.read = function (size, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var fileReader;
            var _this = this;
            return __generator(this, function (_a) {
                size = Math.min(size, this._blob.size - this._position);
                if (size <= 0) {
                    return [2 /*return*/, new Uint8Array()];
                }
                fileReader = new FileReader();
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var cleanUp = function () {
                            if (options.abortSignal) {
                                options.abortSignal.removeEventListener("abort", abortHandler);
                            }
                        };
                        var abortHandler = function () {
                            fileReader.abort();
                            cleanUp();
                            reject(ABORT_ERROR);
                        };
                        if (options.abortSignal) {
                            options.abortSignal.addEventListener("abort", abortHandler);
                        }
                        fileReader.onloadend = function (ev) {
                            cleanUp();
                            resolve(new Uint8Array(ev.target.result));
                        };
                        fileReader.onerror = function () {
                            cleanUp();
                            reject();
                        };
                        fileReader.readAsArrayBuffer(_this._blob.slice(_this._position, (_this._position += size)));
                    })];
            });
        });
    };
    return AvroReadableFromBlob;
}(AvroReadable));
export { AvroReadableFromBlob };
//# sourceMappingURL=AvroReadableFromBlob.js.map