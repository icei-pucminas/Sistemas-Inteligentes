// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __extends } from "tslib";
import { TestSpan } from "./testSpan";
import { NoOpTracer } from "../noop/noOpTracer";
import { SpanKind, TraceFlags } from "@opentelemetry/api";
/**
 * A mock tracer useful for testing
 */
var TestTracer = /** @class */ (function (_super) {
    __extends(TestTracer, _super);
    function TestTracer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.traceIdCounter = 0;
        _this.spanIdCounter = 0;
        _this.rootSpans = [];
        _this.knownSpans = [];
        return _this;
    }
    TestTracer.prototype.getNextTraceId = function () {
        this.traceIdCounter++;
        return String(this.traceIdCounter);
    };
    TestTracer.prototype.getNextSpanId = function () {
        this.spanIdCounter++;
        return String(this.spanIdCounter);
    };
    /**
     * Returns all Spans that were created without a parent
     */
    TestTracer.prototype.getRootSpans = function () {
        return this.rootSpans;
    };
    /**
     * Returns all Spans this Tracer knows about
     */
    TestTracer.prototype.getKnownSpans = function () {
        return this.knownSpans;
    };
    /**
     * Returns all Spans where end() has not been called
     */
    TestTracer.prototype.getActiveSpans = function () {
        return this.knownSpans.filter(function (span) {
            return !span.endCalled;
        });
    };
    /**
     * Return all Spans for a particular trace, grouped by their
     * parent Span in a tree-like structure
     * @param traceId - The traceId to return the graph for
     */
    TestTracer.prototype.getSpanGraph = function (traceId) {
        var traceSpans = this.knownSpans.filter(function (span) {
            return span.context().traceId === traceId;
        });
        var roots = [];
        var nodeMap = new Map();
        for (var _i = 0, traceSpans_1 = traceSpans; _i < traceSpans_1.length; _i++) {
            var span = traceSpans_1[_i];
            var spanId = span.context().spanId;
            var node = {
                name: span.name,
                children: []
            };
            nodeMap.set(spanId, node);
            if (span.parentSpanId) {
                var parent = nodeMap.get(span.parentSpanId);
                if (!parent) {
                    throw new Error("Span with name " + node.name + " has an unknown parentSpan with id " + span.parentSpanId);
                }
                parent.children.push(node);
            }
            else {
                roots.push(node);
            }
        }
        return {
            roots: roots
        };
    };
    /**
     * Starts a new Span.
     * @param name - The name of the span.
     * @param options - The SpanOptions used during Span creation.
     */
    TestTracer.prototype.startSpan = function (name, options) {
        if (options === void 0) { options = {}; }
        var parentContext = this._getParentContext(options);
        var traceId;
        var isRootSpan = false;
        if (parentContext && parentContext.traceId) {
            traceId = parentContext.traceId;
        }
        else {
            traceId = this.getNextTraceId();
            isRootSpan = true;
        }
        var context = {
            traceId: traceId,
            spanId: this.getNextSpanId(),
            traceFlags: TraceFlags.NONE
        };
        var span = new TestSpan(this, name, context, options.kind || SpanKind.INTERNAL, parentContext ? parentContext.spanId : undefined, options.startTime);
        this.knownSpans.push(span);
        if (isRootSpan) {
            this.rootSpans.push(span);
        }
        return span;
    };
    TestTracer.prototype._getParentContext = function (options) {
        var parent = options.parent;
        var result;
        if (parent) {
            if ("traceId" in parent) {
                result = parent;
            }
            else {
                result = parent.context();
            }
        }
        return result;
    };
    return TestTracer;
}(NoOpTracer));
export { TestTracer };
//# sourceMappingURL=testTracer.js.map