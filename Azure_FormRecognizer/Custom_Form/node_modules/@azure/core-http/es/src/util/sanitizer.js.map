{"version":3,"file":"sanitizer.js","sourceRoot":"","sources":["../../../src/util/sanitizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { URLBuilder, URLQuery } from \"../url\";\n\nexport interface SanitizerOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled. Defaults to\n   * Date, traceparent, x-ms-client-request-id, and x-ms-request id.  Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  allowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  allowedQueryParameters?: string[];\n}\n\nconst RedactedString = \"REDACTED\";\n\nconst defaultAllowedHeaderNames = [\n  \"x-ms-client-request-id\",\n  \"x-ms-return-client-request-id\",\n  \"x-ms-useragent\",\n  \"x-ms-correlation-request-id\",\n  \"x-ms-request-id\",\n  \"client-request-id\",\n  \"ms-cv\",\n  \"return-client-request-id\",\n  \"traceparent\",\n\n  \"Access-Control-Allow-Credentials\",\n  \"Access-Control-Allow-Headers\",\n  \"Access-Control-Allow-Methods\",\n  \"Access-Control-Allow-Origin\",\n  \"Access-Control-Expose-Headers\",\n  \"Access-Control-Max-Age\",\n  \"Access-Control-Request-Headers\",\n  \"Access-Control-Request-Method\",\n  \"Origin\",\n\n  \"Accept\",\n  \"Cache-Control\",\n  \"Connection\",\n  \"Content-Length\",\n  \"Content-Type\",\n  \"Date\",\n  \"ETag\",\n  \"Expires\",\n  \"If-Match\",\n  \"If-Modified-Since\",\n  \"If-None-Match\",\n  \"If-Unmodified-Since\",\n  \"Last-Modified\",\n  \"Pragma\",\n  \"Request-Id\",\n  \"Retry-After\",\n  \"Server\",\n  \"Transfer-Encoding\",\n  \"User-Agent\"\n];\n\nconst defaultAllowedQueryParameters: string[] = [\"api-version\"];\n\nexport class Sanitizer {\n  public allowedHeaderNames: Set<string>;\n  public allowedQueryParameters: Set<string>;\n\n  constructor({ allowedHeaderNames = [], allowedQueryParameters = [] }: SanitizerOptions = {}) {\n    allowedHeaderNames = Array.isArray(allowedHeaderNames)\n      ? defaultAllowedHeaderNames.concat(allowedHeaderNames)\n      : defaultAllowedHeaderNames;\n\n    allowedQueryParameters = Array.isArray(allowedQueryParameters)\n      ? defaultAllowedQueryParameters.concat(allowedQueryParameters)\n      : defaultAllowedQueryParameters;\n\n    this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));\n    this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));\n  }\n\n  public sanitize(obj: unknown): string {\n    return JSON.stringify(obj, this.replacer.bind(this), 2);\n  }\n\n  private replacer(key: string, value: unknown): any {\n    // Ensure Errors include their interesting non-enumerable members\n    if (value instanceof Error) {\n      return {\n        ...value,\n        name: value.name,\n        message: value.message\n      };\n    }\n    if (key === \"_headersMap\") {\n      return this.sanitizeHeaders(key, value as Record<string, any>);\n    } else if (key === \"url\") {\n      return this.sanitizeUrl(value as string);\n    } else if (key === \"query\") {\n      return this.sanitizeQuery(value as Record<string, string>);\n    } else if (key === \"body\") {\n      // Don't log the request body\n      return undefined;\n    } else if (key === \"response\") {\n      // Don't log response again\n      return undefined;\n    } else if (key === \"operationSpec\") {\n      // When using sendOperationRequest, the request carries a massive\n      // field with the autorest spec. No need to log it.\n      return undefined;\n    }\n\n    return value;\n  }\n\n  private sanitizeHeaders(_: string, value: { [s: string]: any }): { [s: string]: string } {\n    return this.sanitizeObject(value, this.allowedHeaderNames, (v, k) => v[k].value);\n  }\n\n  private sanitizeQuery(value: { [s: string]: string }): { [s: string]: string } {\n    return this.sanitizeObject(value, this.allowedQueryParameters, (v, k) => v[k]);\n  }\n\n  private sanitizeObject(\n    value: { [s: string]: any },\n    allowedKeys: Set<string>,\n    accessor: (value: any, key: string) => any\n  ): { [s: string]: string } {\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n\n    const sanitized: { [s: string]: string } = {};\n\n    for (const k of Object.keys(value)) {\n      if (allowedKeys.has(k.toLowerCase())) {\n        sanitized[k] = accessor(value, k);\n      } else {\n        sanitized[k] = RedactedString;\n      }\n    }\n\n    return sanitized;\n  }\n\n  private sanitizeUrl(value: string): string {\n    if (typeof value !== \"string\" || value === null) {\n      return value;\n    }\n\n    const urlBuilder = URLBuilder.parse(value);\n    const queryString = urlBuilder.getQuery();\n\n    if (!queryString) {\n      return value;\n    }\n\n    const query = URLQuery.parse(queryString);\n    for (const k of query.keys()) {\n      if (!this.allowedQueryParameters.has(k.toLowerCase())) {\n        query.set(k, RedactedString);\n      }\n    }\n\n    urlBuilder.setQuery(query.toString());\n    return urlBuilder.toString();\n  }\n}\n"]}