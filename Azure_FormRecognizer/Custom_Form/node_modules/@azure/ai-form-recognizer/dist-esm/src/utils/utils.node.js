// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __awaiter } from "tslib";
const SIZE_ONE_MEGA = 1024 * 1024;
/**
 * Reads a readable stream into buffer entirely. NodeJS only.
 * The maximum allowed size is specified in {@link MAX_INPUT_DOCUMENT_SIZE}.
 *
 * @param stream - A Node.js Readable stream
 * @returns The resultant buffer.
 * @throws If buffer size is not big enough.
 */
export function streamToBuffer(stream, maxSize) {
    return __awaiter(this, void 0, void 0, function* () {
        let pos = 0; // Position in stream
        let size = SIZE_ONE_MEGA;
        let buffer = Buffer.alloc(size);
        return new Promise((resolve, reject) => {
            stream.on("readable", () => {
                const chunk = stream.read();
                if (!chunk) {
                    return;
                }
                const nextPos = pos + chunk.length;
                if (size < nextPos && nextPos <= maxSize) {
                    // Keep doubling buffer until it is large enough or over max size
                    const oldSize = size;
                    while (size < nextPos && size * 2 < maxSize) {
                        size *= 2;
                    }
                    if (nextPos < size && size < maxSize) {
                        const newBuffer = Buffer.alloc(size - oldSize);
                        buffer = Buffer.concat([buffer, newBuffer]);
                    }
                    else {
                        const newBuffer = Buffer.alloc(maxSize - oldSize);
                        size = maxSize;
                        buffer = Buffer.concat([buffer, newBuffer]);
                    }
                }
                else if (nextPos > maxSize) {
                    reject(new Error(`Input stream exceeds maximum allowed size: ${maxSize}`));
                    return;
                }
                buffer.fill(chunk, pos, nextPos);
                pos = nextPos;
            });
            stream.on("end", () => {
                resolve(buffer.slice(0, pos));
            });
            stream.on("error", reject);
        });
    });
}
export function getFirstFourBytesFromBlob(_data) {
    throw new Error("Blob is not supported in NodeJS environment");
}
//# sourceMappingURL=utils.node.js.map