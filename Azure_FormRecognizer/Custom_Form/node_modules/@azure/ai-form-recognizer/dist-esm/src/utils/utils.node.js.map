{"version":3,"file":"utils.node.js","sourceRoot":"","sources":["../../../src/utils/utils.node.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,MAAM,aAAa,GAAG,IAAI,GAAG,IAAI,CAAC;AAElC;;;;;;;GAOG;AACH,MAAM,UAAgB,cAAc,CAClC,MAA6B,EAC7B,OAAe;;QAEf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,qBAAqB;QAClC,IAAI,IAAI,GAAG,aAAa,CAAC;QACzB,IAAI,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAEhC,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC7C,MAAM,CAAC,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;gBACzB,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;gBAC5B,IAAI,CAAC,KAAK,EAAE;oBACV,OAAO;iBACR;gBACD,MAAM,OAAO,GAAG,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC;gBACnC,IAAI,IAAI,GAAG,OAAO,IAAI,OAAO,IAAI,OAAO,EAAE;oBACxC,iEAAiE;oBACjE,MAAM,OAAO,GAAG,IAAI,CAAC;oBACrB,OAAO,IAAI,GAAG,OAAO,IAAI,IAAI,GAAG,CAAC,GAAG,OAAO,EAAE;wBAC3C,IAAI,IAAI,CAAC,CAAC;qBACX;oBAED,IAAI,OAAO,GAAG,IAAI,IAAI,IAAI,GAAG,OAAO,EAAE;wBACpC,MAAM,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC,CAAC;wBAC/C,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC;qBAC7C;yBAAM;wBACL,MAAM,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC;wBAClD,IAAI,GAAG,OAAO,CAAC;wBACf,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC;qBAC7C;iBACF;qBAAM,IAAI,OAAO,GAAG,OAAO,EAAE;oBAC5B,MAAM,CAAC,IAAI,KAAK,CAAC,8CAA8C,OAAO,EAAE,CAAC,CAAC,CAAC;oBAC3E,OAAO;iBACR;gBAED,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;gBACjC,GAAG,GAAG,OAAO,CAAC;YAChB,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;gBACpB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;IACL,CAAC;CAAA;AAED,MAAM,UAAU,yBAAyB,CAAC,KAAW;IACnD,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;AACjE,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nconst SIZE_ONE_MEGA = 1024 * 1024;\n\n/**\n * Reads a readable stream into buffer entirely. NodeJS only.\n * The maximum allowed size is specified in {@link MAX_INPUT_DOCUMENT_SIZE}.\n *\n * @param stream - A Node.js Readable stream\n * @returns The resultant buffer.\n * @throws If buffer size is not big enough.\n */\nexport async function streamToBuffer(\n  stream: NodeJS.ReadableStream,\n  maxSize: number\n): Promise<Buffer> {\n  let pos = 0; // Position in stream\n  let size = SIZE_ONE_MEGA;\n  let buffer = Buffer.alloc(size);\n\n  return new Promise<Buffer>((resolve, reject) => {\n    stream.on(\"readable\", () => {\n      const chunk = stream.read();\n      if (!chunk) {\n        return;\n      }\n      const nextPos = pos + chunk.length;\n      if (size < nextPos && nextPos <= maxSize) {\n        // Keep doubling buffer until it is large enough or over max size\n        const oldSize = size;\n        while (size < nextPos && size * 2 < maxSize) {\n          size *= 2;\n        }\n\n        if (nextPos < size && size < maxSize) {\n          const newBuffer = Buffer.alloc(size - oldSize);\n          buffer = Buffer.concat([buffer, newBuffer]);\n        } else {\n          const newBuffer = Buffer.alloc(maxSize - oldSize);\n          size = maxSize;\n          buffer = Buffer.concat([buffer, newBuffer]);\n        }\n      } else if (nextPos > maxSize) {\n        reject(new Error(`Input stream exceeds maximum allowed size: ${maxSize}`));\n        return;\n      }\n\n      buffer.fill(chunk, pos, nextPos);\n      pos = nextPos;\n    });\n\n    stream.on(\"end\", () => {\n      resolve(buffer.slice(0, pos));\n    });\n\n    stream.on(\"error\", reject);\n  });\n}\n\nexport function getFirstFourBytesFromBlob(_data: Blob): Promise<Uint8Array> {\n  throw new Error(\"Blob is not supported in NodeJS environment\");\n}\n"]}