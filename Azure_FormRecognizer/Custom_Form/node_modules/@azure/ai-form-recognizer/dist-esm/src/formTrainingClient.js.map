{"version":3,"file":"formTrainingClient.js","sourceRoot":"","sources":["../../src/formTrainingClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/// <reference lib=\"esnext.asynciterable\" />\n\nimport {\n  createPipelineFromOptions,\n  InternalPipelineOptions,\n  isTokenCredential,\n  bearerTokenAuthenticationPolicy,\n  operationOptionsToRequestOptionsBase,\n  RestResponse\n} from \"@azure/core-http\";\nimport { TokenCredential, KeyCredential } from \"@azure/core-auth\";\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport \"@azure/core-paging\";\nimport {\n  SDK_VERSION,\n  DEFAULT_COGNITIVE_SCOPE,\n  FormRecognizerLoggingAllowedHeaderNames,\n  FormRecognizerLoggingAllowedQueryParameters\n} from \"./constants\";\nimport { logger } from \"./logger\";\nimport { createSpan } from \"./tracing\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { GeneratedClient } from \"./generated/generatedClient\";\nimport {\n  GeneratedClientGetCustomModelCopyResultResponse as GetCustomModelCopyResultResponseModel,\n  GeneratedClientCopyCustomModelResponse as CopyCustomModelResponseModel,\n  GeneratedClientTrainCustomModelAsyncResponse,\n  CopyAuthorizationResult,\n  GeneratedClientComposeCustomModelsAsyncResponse\n} from \"./generated/models\";\nimport { TrainPollerClient, BeginTrainingPoller } from \"./lro/train/poller\";\nimport { PollOperationState, PollerLike } from \"@azure/core-lro\";\nimport { FormRecognizerClientOptions, FormRecognizerOperationOptions } from \"./common\";\nimport {\n  FormModelResponse,\n  AccountProperties,\n  CustomFormModel,\n  CustomFormModelInfo,\n  CopyAuthorization,\n  ListCustomModelsResponse,\n  OperationStatus,\n  ModelStatus\n} from \"./models\";\nimport { createFormRecognizerAzureKeyCredentialPolicy } from \"./azureKeyCredentialPolicy\";\nimport { toFormModelResponse } from \"./transforms\";\nimport { CopyModelPollerClient, BeginCopyModelPoller } from \"./lro/copy/poller\";\nimport { FormRecognizerClient } from \"./formRecognizerClient\";\n\nexport { RestResponse };\n\n/**\n * Options for model listing operation.\n */\nexport type ListModelsOptions = FormRecognizerOperationOptions;\n\n/**\n * Options for the get account properties operation.\n */\nexport type GetAccountPropertiesOptions = FormRecognizerOperationOptions;\n\n/**\n * Options for the delete model operation.\n */\nexport type DeleteModelOptions = FormRecognizerOperationOptions;\n\n/**\n * Options for the get model operation.\n */\nexport type GetModelOptions = FormRecognizerOperationOptions;\n\n/**\n * Options for the generate copy model authorization operation.\n */\nexport type GetCopyAuthorizationOptions = FormRecognizerOperationOptions;\n\n/**\n * Options for the copy custom model operation.\n */\nexport type CopyModelOptions = FormRecognizerOperationOptions;\n\n/**\n * Options for the get copy model result operation.\n */\nexport type GetCopyModelResultOptions = FormRecognizerOperationOptions;\n\n/**\n * The status of a copy model operation\n */\nexport type CopyModelOperationState = PollOperationState<CustomFormModel> & {\n  /**\n   * A string representing the current status of the operation.\n   */\n  status: OperationStatus;\n};\n\n/**\n * Options for configuring long-running operations.\n */\nexport interface FormTrainingPollOperationOptions<TState extends PollOperationState<unknown>> {\n  /**\n   * Interval (in milliseconds) between requests for status updates on the operation.\n   */\n  updateIntervalInMs?: number;\n  /**\n   * Progress handler. The Poller will call this handler with the operation state\n   * after polling.\n   */\n  onProgress?: (state: TState) => void;\n  /**\n   * State of a previously-serialized poller to resume an operation.\n   *\n   * The state can be obtained from a poller using `poller.toString()`.\n   */\n  resumeFrom?: string;\n}\n\n/**\n * Options for begin copy model operation\n */\nexport type BeginCopyModelOptions = FormRecognizerOperationOptions &\n  FormTrainingPollOperationOptions<CopyModelOperationState>;\n\n/**\n * Options for training models\n */\nexport type TrainingFileFilter = FormRecognizerOperationOptions & {\n  prefix?: string;\n  includeSubfolders?: boolean;\n};\n\n/**\n * The status of a form training operation\n */\nexport type TrainingOperationState = PollOperationState<CustomFormModelInfo> & {\n  /**\n   * A string representing the current status of the operation.\n   */\n  status: ModelStatus;\n};\n\n/**\n * Options for starting model training operation.\n */\nexport type BeginTrainingOptions = TrainingFileFilter &\n  FormTrainingPollOperationOptions<TrainingOperationState> & {\n    /**\n     * An optional name to associate with the model\n     */\n    modelName?: string;\n  };\n\n/**\n * Options for creating a composed model from submodels.\n */\nexport type BeginCreateComposedModelOptions = FormRecognizerOperationOptions &\n  FormTrainingPollOperationOptions<TrainingOperationState> & {\n    /**\n     * An optional name to associate with the composed model.\n     *\n     * Individual models that are part of the composition will retain their original names.\n     */\n    modelName?: string;\n  };\n\n/**\n * Client class for training and managing custom form models.\n */\nexport class FormTrainingClient {\n  /**\n   * Url to an Azure Form Recognizer service endpoint\n   */\n  public readonly endpointUrl: string;\n\n  /**\n   * @internal\n   */\n  private readonly credential: TokenCredential | KeyCredential;\n\n  /**\n   * @internal\n   */\n  private readonly clientOptions: FormRecognizerClientOptions;\n\n  /**\n   * @internal\n   * A reference to the auto-generated FormRecognizer HTTP client.\n   */\n  private readonly client: GeneratedClient;\n\n  /**\n   * Creates an instance of FormTrainingClient.\n   *\n   * Example usage:\n   * ```ts\n   * import {FormTrainingClient, AzureKeyCredential } from \"@azure/ai-form-recognizer\";\n   *\n   * const client = new FormTrainingClient(\n   *    \"<service endpoint>\",\n   *    new AzureKeyCredential(\"<api key>\")\n   * );\n   * ```\n   * @param endpointUrl - Url to an Azure Form Recognizer service endpoint\n   * @param credential - Used to authenticate requests to the service.\n   * @param options - Used to configure the client.\n   */\n  constructor(\n    endpointUrl: string,\n    credential: TokenCredential | KeyCredential,\n    options: FormRecognizerClientOptions = {}\n  ) {\n    this.endpointUrl = endpointUrl;\n    this.credential = credential;\n    this.clientOptions = options;\n    const { ...pipelineOptions } = options;\n\n    const libInfo = `azsdk-js-ai-formrecognizer/${SDK_VERSION}`;\n    if (!pipelineOptions.userAgentOptions) {\n      pipelineOptions.userAgentOptions = {};\n    }\n    if (pipelineOptions.userAgentOptions.userAgentPrefix) {\n      pipelineOptions.userAgentOptions.userAgentPrefix = `${pipelineOptions.userAgentOptions.userAgentPrefix} ${libInfo}`;\n    } else {\n      pipelineOptions.userAgentOptions.userAgentPrefix = libInfo;\n    }\n\n    const authPolicy = isTokenCredential(credential)\n      ? bearerTokenAuthenticationPolicy(credential, DEFAULT_COGNITIVE_SCOPE)\n      : createFormRecognizerAzureKeyCredentialPolicy(credential);\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...pipelineOptions,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          allowedHeaderNames: FormRecognizerLoggingAllowedHeaderNames,\n          allowedQueryParameters: FormRecognizerLoggingAllowedQueryParameters\n        }\n      }\n    };\n\n    const pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);\n\n    this.client = new GeneratedClient(this.endpointUrl, pipeline);\n  }\n\n  /**\n   * Retrieves summary information about the cognitive service account\n   *\n   * @param options - Options to GetSummary operation\n   */\n  public async getAccountProperties(\n    options?: GetAccountPropertiesOptions\n  ): Promise<AccountProperties> {\n    const realOptions = options || {};\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"FormTrainingClient-listCustomModels\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.getCustomModels({\n        ...operationOptionsToRequestOptionsBase(finalOptions)\n      });\n\n      return {\n        customModelLimit: result.summary!.limit,\n        customModelCount: result.summary!.count\n      };\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates an instance of {@link FormTrainingClient} to perform training operations\n   * and to manage trained custom form models.\n   */\n  public getFormRecognizerClient(): FormRecognizerClient {\n    return new FormRecognizerClient(this.endpointUrl, this.credential, this.clientOptions);\n  }\n\n  /**\n   * Mark model for deletion. Model artifacts will be permanently removed within 48 hours.\n   *\n   * @param modelId - Id of the model to mark for deletion\n   * @param options - Options to the Delete Model operation\n   */\n  public async deleteModel(modelId: string, options?: DeleteModelOptions): Promise<RestResponse> {\n    const realOptions = options || {};\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"FormTrainingClient-deleteModel\",\n      realOptions\n    );\n\n    try {\n      return await this.client.deleteCustomModel(\n        modelId,\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Get detailed information about a custom model from training.\n   *\n   * @param modelId - Id of the model to get information\n   * @param options - Options to the Get Model operation\n   */\n  public async getCustomModel(\n    modelId: string,\n    options: GetModelOptions = {}\n  ): Promise<FormModelResponse> {\n    const realOptions = options || {};\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"FormTrainingClient-getCustomModel\",\n      realOptions\n    );\n\n    try {\n      const response = await this.client.getCustomModel(modelId, {\n        ...operationOptionsToRequestOptionsBase(finalOptions),\n        // Include keys is always set to true -- the service does not have a use case for includeKeys: false.\n        includeKeys: true\n      });\n\n      return toFormModelResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async *listModelsPage(\n    settings: PageSettings,\n    options: ListModelsOptions = {}\n  ): AsyncIterableIterator<ListCustomModelsResponse> {\n    let result: ListCustomModelsResponse;\n    if (settings.continuationToken) {\n      result = await this.listNextPage(settings.continuationToken, options);\n    } else {\n      result = await this.list(options);\n    }\n    yield result;\n\n    while (result.nextLink) {\n      result = await this.listNextPage(result.nextLink, options);\n      yield result;\n    }\n  }\n\n  private async *listModelsAll(\n    settings: PageSettings,\n    options: ListModelsOptions = {}\n  ): AsyncIterableIterator<CustomFormModelInfo> {\n    for await (const page of this.listModelsPage(settings, options)) {\n      yield* page.modelList || [];\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list information about all models in the cognitive service account.\n   *\n   * .byPage() returns an async iterable iterator to list the blobs in pages.\n   *\n   * Example using `for await` syntax:\n   *\n   * ```js\n   * const client = new FormTrainingClient(endpoint, new AzureKeyCredential(apiKey));\n   * const result = client.listCustomModels();\n   * let i = 1;\n   * for await (const model of result) {\n   *   console.log(`model ${i++}:`);\n   *   console.log(model);\n   * }\n   * ```\n   *\n   * Example using `iter.next()`:\n   *\n   * ```js\n   * let i = 1;\n   * let iter = client.listCustomModels();\n   * let modelItem = await iter.next();\n   * while (!modelItem.done) {\n   *   console.log(`model ${i++}: ${modelItem.value}`);\n   *   modelItem = await iter.next();\n   * }\n   * ```\n   *\n   * Example using `byPage()`:\n   *\n   * ```js\n   *  let i = 1;\n   *  for await (const response of client.listCustomModels().byPage()) {\n   *    for (const modelInfo of response.modelList!) {\n   *      console.log(`model ${i++}: ${modelInfo.modelId}`);\n   *    }\n   *  }\n   * ```\n   *\n   * @param options - Options to the List Models operation\n   */\n  public listCustomModels(\n    options: ListModelsOptions = {}\n  ): PagedAsyncIterableIterator<CustomFormModelInfo, ListCustomModelsResponse> {\n    const iter = this.listModelsAll({}, options);\n\n    return {\n      next() {\n        return iter.next();\n      },\n\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n\n      byPage: (settings: PageSettings = {}) => {\n        return this.listModelsPage(settings, options);\n      }\n    };\n  }\n\n  private async list(options?: ListModelsOptions): Promise<ListCustomModelsResponse> {\n    const realOptions: ListModelsOptions = options || {};\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"FormTrainingClient-list\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.listCustomModels({\n        ...operationOptionsToRequestOptionsBase(finalOptions)\n      });\n\n      return result;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async listNextPage(\n    nextLink: string,\n    options?: ListModelsOptions\n  ): Promise<ListCustomModelsResponse> {\n    const realOptions: ListModelsOptions = options || {};\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"FormTrainingClient-listNextPage\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.listCustomModelsNext(nextLink, {\n        ...operationOptionsToRequestOptionsBase(finalOptions)\n      });\n\n      return result;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates and trains a custom form model.\n   *\n   * If the `useTrainingLabels` parameter is set to `true`, then the operation will search\n   * for label files in addition to the training documents, and it will create a labeled\n   * model with the field names specified by the labels. Otherwise, it will create an\n   * unlabeled model automatically that returns generated field names for the items it\n   * determines are fields within the document structure.\n   *\n   * This method returns a long-running operation poller that allows you to wait\n   * indefinitely until the operation is completed.\n   *\n   * Notes:\n   * - The onProgress callback will not be invoked if the operation completes in the first\n   *   request, and attempting to cancel a completed copy will result in an error being thrown.\n   * - Even when the training operation fails, a model is still created in the Azure Form\n   *   Recognizer resource.\n   *\n   * Example usage:\n   * ```ts\n   * const trainingFilesUrl = \"<url to the blob container storing training documents>\";\n   * const trainingClient = new FormTrainingClient(endpoint, new AzureKeyCredential(apiKey));\n   *\n   * const poller = await trainingClient.beginTraining(trainingFilesUrl, false, {\n   *   onProgress: (state) => { console.log(\"training status: \"); console.log(state); }\n   * });\n   * const model = await poller.pollUntilDone();\n   * ```\n   *\n   * Creates and trains a custom form model.\n   * @param trainingFilesUrl - Accessible url to an Azure Storage Blob container storing the training documents and optional label files\n   * @param useTrainingLabels - Specifies whether or not to search for and train using label files\n   * @param options - Options to start the model training operation\n   */\n  public async beginTraining(\n    trainingFilesUrl: string,\n    useTrainingLabels: boolean,\n    options: BeginTrainingOptions = {}\n  ): Promise<PollerLike<TrainingOperationState, CustomFormModel>> {\n    const trainPollerClient: TrainPollerClient = {\n      getCustomModel: (modelId: string, optionsParam: GetModelOptions) =>\n        this.getCustomModel(modelId, optionsParam),\n      trainCustomModelInternal: (\n        source: string | string[],\n        _useLabelFile?: boolean,\n        optionsParam?: BeginTrainingOptions\n      ) => trainCustomModelInternal(this.client, source as string, useTrainingLabels, optionsParam)\n    };\n\n    const poller = new BeginTrainingPoller({\n      client: trainPollerClient,\n      trainingInputs: trainingFilesUrl,\n      updateIntervalInMs: options.updateIntervalInMs,\n      onProgress: options.onProgress,\n      resumeFrom: options.resumeFrom,\n      trainModelOptions: options\n    });\n\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Combines pre-existing models with labels into a single composed model.\n   *\n   * The composed model will contain copies of all of its input submodels, and it will\n   * choose (using a machine learning algorithm) the most appropriate of its input models\n   * to use during form recognition.\n   *\n   * This method returns a long-running operation poller that allows you to wait\n   * indefinitely until the operation is completed.\n   *\n   * Notes:\n   * - Only labeled models can be composed. Attempting to compose an unlabeled model will\n   *   result in an error.\n   * - the onProgress callback will not be invoked if the operation completes in the first\n   *   request, and attempting to cancel a completed copy will result in an error being thrown.\n   * - evena when the training operation fails, a model is still created in the Azure Form\n   *   Recognizer resource.\n   *\n   * Example usage:\n   * ```ts\n   * const modelIds = [\"<model ID 1>\", \"<model ID 2>\", \"<model ID 3>\"];\n   * const trainingClient = new FormTrainingClient(endpoint, new AzureKeyCredential(apiKey));\n   *\n   * const poller = await trainingClient.beginCreateComposedModel(modelIds, {\n   *   modelName: \"<optional name for the composed model>\",\n   *   onProgress: (state) => { console.log(\"training status: \"); console.log(state); }\n   * });\n   * const composedModel = await poller.pollUntilDone();\n   * ```\n   *\n   * Combines pre-existing models with labels into a single composed model.\n   * @param modelIds - An array of model IDs within the Form Recognizer resouce to compose\n   * @param options - Options to start the create composed model operation\n   */\n  public async beginCreateComposedModel(\n    modelIds: string[],\n    options: BeginCreateComposedModelOptions\n  ): Promise<PollerLike<TrainingOperationState, CustomFormModel>> {\n    const composePollerClient: TrainPollerClient = {\n      getCustomModel: (modelId, optionsParam) => this.getCustomModel(modelId, optionsParam),\n      trainCustomModelInternal: (\n        sources: string | string[],\n        _?: boolean,\n        optionsParam?: BeginTrainingOptions\n      ) => composeModelInternal(this.client, sources as string[], optionsParam)\n    };\n\n    const poller = new BeginTrainingPoller({\n      client: composePollerClient,\n      trainingInputs: modelIds,\n      updateIntervalInMs: options.updateIntervalInMs,\n      onProgress: options.onProgress,\n      resumeFrom: options.resumeFrom,\n      trainModelOptions: options\n    });\n\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Generate an authorization for copying a custom model into this Azure Form Recognizer resource.\n   *\n   * This method should be called on a client that is authenticated using the target resource (where the\n   * model will be copied to) credentials, and the output can be passed as the `target` parameter to the\n   * `beginCopyModel` method of a source client.\n   *\n   * The required `resourceId` and `resourceRegion` are properties of an Azure Form Recognizer resource and their values can be found in the Azure Portal.\n   *\n   * @param resourceId - Id of the Azure Form Recognizer resource where a custom model will be copied to\n   * @param resourceRegion - Location of the Azure Form Recognizer resource, must be a valid region name supported by Azure Cognitive Services. See https://aka.ms/azsdk/cognitiveservices/regionalavailability for information about the regional availability of Azure Cognitive Services.\n   * @param options - Options to get copy authorization operation\n   * @returns The authorization to copy a custom model\n   */\n  public async getCopyAuthorization(\n    resourceId: string,\n    resourceRegion: string,\n    options: GetCopyAuthorizationOptions = {}\n  ): Promise<CopyAuthorization> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"FormTrainingClient-getCopyAuthorization\",\n      options\n    );\n\n    try {\n      const response = (await this.client.generateModelCopyAuthorization(\n        operationOptionsToRequestOptionsBase(finalOptions)\n      )) as CopyAuthorizationResult;\n      return {\n        resourceId: resourceId,\n        resourceRegion: resourceRegion,\n        expiresOn: new Date(response.expirationDateTimeTicks * 1000), // Convert to ms\n        modelId: response.modelId,\n        accessToken: response.accessToken\n      };\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Copies a custom model from this resource (the source) to the specified target Form Recognizer resource.\n   * This method returns a long running operation poller that allows you to wait\n   * indefinitely until the operation is completed.\n   * Note that the onProgress callback will not be invoked if the operation completes in the first\n   * request, and attempting to cancel a completed copy will result in an error being thrown.\n   *\n   * Example usage:\n   * ```ts\n   * const targetClient = new FormTrainingClient(targetEndpoint, new AzureKeyCredential(targetApiKey));\n   * const authorization = await targetClient.getCopyAuthorization(targetResourceId, targetResourceRegion);\n   *\n   * const sourceClient = new FormTrainingClient(endpoint, new AzureKeyCredential(apiKey));\n   * const poller = await sourceClient.beginCopyModel(sourceModelId, authorization, {\n   *   onProgress: (state) => {\n   *     console.log(`Copy model status: ${state.status}`);\n   *   }\n   * });\n   * const result = await poller.pollUntilDone();\n   * ```\n   * Copies custom model to target resource\n   * @param modelId - Id of the custom model in this resource to be copied to the target Form Recognizer resource\n   * @param target - Copy authorization produced by calling `targetTrainingClient.getCopyAuthorization()`\n   * @param options - Options to copy model operation\n   */\n  public async beginCopyModel(\n    modelId: string,\n    target: CopyAuthorization,\n    options: BeginCopyModelOptions = {}\n  ): Promise<PollerLike<CopyModelOperationState, CustomFormModelInfo>> {\n    const copyModelClient: CopyModelPollerClient = {\n      beginCopyModel: (...args) => this.beginCopyModelInternal(...args),\n      getCopyModelResult: (...args) => this.getCopyModelResult(...args)\n    };\n\n    const poller = new BeginCopyModelPoller({\n      client: copyModelClient,\n      modelId,\n      targetResourceId: target.resourceId,\n      targetResourceRegion: target.resourceRegion,\n      copyAuthorization: target,\n      onProgress: options.onProgress,\n      resumeFrom: options.resumeFrom,\n      ...options\n    });\n\n    await poller.poll();\n    return poller;\n  }\n\n  private async beginCopyModelInternal(\n    modelId: string,\n    copyAuthorization: CopyAuthorization,\n    options: BeginCopyModelOptions = {}\n  ): Promise<CopyCustomModelResponseModel> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"FormTrainingClient-beginCopyModelInternal\",\n      options\n    );\n\n    try {\n      return await this.client.copyCustomModel(\n        modelId,\n        {\n          targetResourceId: copyAuthorization.resourceId,\n          targetResourceRegion: copyAuthorization.resourceRegion,\n          copyAuthorization: {\n            modelId: copyAuthorization.modelId,\n            accessToken: copyAuthorization.accessToken,\n            expirationDateTimeTicks: copyAuthorization.expiresOn.getTime() / 1000\n          }\n        },\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async getCopyModelResult(\n    modelId: string,\n    resultId: string,\n    options: GetCopyModelResultOptions = {}\n  ): Promise<GetCustomModelCopyResultResponseModel> {\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"FormTrainingClient-getCopyModelResult\",\n      options\n    );\n\n    try {\n      return await this.client.getCustomModelCopyResult(\n        modelId,\n        resultId,\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n\n/**\n * @internal\n */\nasync function composeModelInternal(\n  // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n  client: GeneratedClient,\n  modelIds: string[],\n  options?: BeginCreateComposedModelOptions\n): Promise<GeneratedClientComposeCustomModelsAsyncResponse> {\n  const { span, updatedOptions: finalOptions } = createSpan(\"composeModelInternal\", options ?? {});\n\n  try {\n    return client.composeCustomModelsAsync(\n      {\n        modelIds,\n        modelName: options?.modelName\n      },\n      operationOptionsToRequestOptionsBase(finalOptions)\n    );\n  } catch (e) {\n    span.setStatus({\n      code: SpanStatusCode.ERROR,\n      message: e.message\n    });\n    throw e;\n  } finally {\n    span.end();\n  }\n}\n\n/**\n * @internal\n */\nasync function trainCustomModelInternal(\n  // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n  client: GeneratedClient,\n  source: string,\n  useLabelFile?: boolean,\n  options?: BeginTrainingOptions\n): Promise<GeneratedClientTrainCustomModelAsyncResponse> {\n  const realOptions = options || {};\n  const { span, updatedOptions: finalOptions } = createSpan(\n    \"trainCustomModelInternal\",\n    realOptions\n  );\n\n  try {\n    return client.trainCustomModelAsync(\n      {\n        source: source,\n        modelName: options?.modelName,\n        sourceFilter: {\n          prefix: realOptions.prefix,\n          includeSubfolders: realOptions.includeSubfolders\n        },\n        useLabelFile\n      },\n      operationOptionsToRequestOptionsBase(finalOptions)\n    );\n  } catch (e) {\n    span.setStatus({\n      code: SpanStatusCode.ERROR,\n      message: e.message\n    });\n    throw e;\n  } finally {\n    span.end();\n  }\n}\n"]}