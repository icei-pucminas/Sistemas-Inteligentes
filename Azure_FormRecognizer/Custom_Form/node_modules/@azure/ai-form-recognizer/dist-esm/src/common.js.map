{"version":3,"file":"common.js","sourceRoot":"","sources":["../../src/common.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PipelineOptions, OperationOptions } from \"@azure/core-http\";\nimport { FormRecognizerRequestBody } from \"./models\";\nimport { SourcePath } from \"./generated/models\";\nimport { getFirstFourBytesFromBlob, streamToBuffer } from \"./utils/utils.node\";\nimport { MAX_INPUT_DOCUMENT_SIZE } from \"./constants\";\n\n/**\n * Content types supported by Form Recognizer service.\n */\nexport type FormContentType =\n  | \"application/pdf\"\n  | \"image/jpeg\"\n  | \"image/png\"\n  | \"image/tiff\"\n  | \"image/bmp\";\n\n/**\n * Client options used to configure Form Recognizer API requests.\n */\nexport interface FormRecognizerClientOptions extends PipelineOptions {}\n\n/**\n * Options common to all form recognizer operations.\n */\nexport interface FormRecognizerOperationOptions extends OperationOptions {}\n\n/**\n * Translate the content to a format that is understood by Form Recognizer service\n * @internal\n */\nexport async function toRequestBody(\n  body: FormRecognizerRequestBody | string\n): Promise<Blob | ArrayBuffer | ArrayBufferView | SourcePath> {\n  if (typeof body === \"string\") {\n    return {\n      source: body\n    };\n  } else {\n    // cache stream to allow retry\n    if (isReadableStream(body)) {\n      return streamToBuffer(body, MAX_INPUT_DOCUMENT_SIZE);\n    }\n\n    return body;\n  }\n}\n\nfunction isReadableStream(data: FormRecognizerRequestBody): data is NodeJS.ReadableStream {\n  return \"read\" in data && typeof data.read === \"function\";\n}\n\nfunction isBlob(data: FormRecognizerRequestBody): data is Blob {\n  return \"size\" in data && \"type\" in data;\n}\n\nfunction isArrayBuffer(data: FormRecognizerRequestBody): data is ArrayBuffer {\n  return \"byteLength\" in data && \"slice\" in data && typeof data.slice === \"function\";\n}\n\nfunction isArrayBufferView(data: FormRecognizerRequestBody): data is ArrayBufferView {\n  return \"buffer\" in data && \"byteLength\" in data && \"byteOffset\" in data;\n}\n\nfunction isSourcePath(data: FormRecognizerRequestBody | SourcePath): data is SourcePath {\n  return \"source\" in data && typeof data.source === \"string\";\n}\n\n/**\n * Detects the content type of binary data.\n * See https://en.wikipedia.org/wiki/List_of_file_signatures\n * @internal\n */\nexport async function getContentType(\n  data: Blob | ArrayBuffer | ArrayBufferView | SourcePath\n): Promise<FormContentType | undefined> {\n  if (isSourcePath(data)) {\n    return undefined;\n  }\n  let bytes: Uint8Array;\n  if (isArrayBuffer(data)) {\n    // ArrayBuffer\n    if (data.byteLength < 4) {\n      throw new RangeError(\"Invalid input. Expect more than 4 bytes of data\");\n    }\n\n    bytes = new Uint8Array(data, 0, 4);\n  } else if (isArrayBufferView(data)) {\n    // ArrayBufferView\n    if (data.byteLength < 4) {\n      throw new RangeError(\"Invalid input. Expect more than 4 bytes of data\");\n    }\n\n    bytes = new Uint8Array(data.buffer, 0, 4);\n  } else if (isBlob(data)) {\n    // Blob\n    bytes = await getFirstFourBytesFromBlob(data);\n  } else {\n    throw new Error(\"unsupported request body type\");\n  }\n\n  if (bytes[0] === 0x25 && bytes[1] === 0x50 && bytes[2] === 0x44 && bytes[3] === 0x46) {\n    return \"application/pdf\";\n  } else if (bytes[0] === 0xff && bytes[1] === 0xd8) {\n    return \"image/jpeg\";\n  } else if (bytes[0] === 0x89 && bytes[1] === 0x50 && bytes[2] === 0x4e && bytes[3] === 0x47) {\n    return \"image/png\";\n  } else if (\n    (bytes[0] === 0x49 && bytes[1] === 0x49 && bytes[2] === 0x2a && bytes[3] === 0x0) ||\n    (bytes[0] === 0x4d && bytes[1] === 0x4d && bytes[2] === 0x0 && bytes[3] === 0x2a)\n  ) {\n    return \"image/tiff\";\n  } else if (bytes[0] === 0x42 && bytes[1] === 0x4d) {\n    return \"image/bmp\";\n  } else {\n    throw new RangeError(\"content type could not be detected\");\n  }\n}\n"]}