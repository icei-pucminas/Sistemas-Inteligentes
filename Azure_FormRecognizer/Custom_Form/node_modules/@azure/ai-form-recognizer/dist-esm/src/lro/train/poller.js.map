{"version":3,"file":"poller.js","sourceRoot":"","sources":["../../../../src/lro/train/poller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { delay } from \"@azure/core-http\";\nimport { Poller, PollOperation, PollOperationState } from \"@azure/core-lro\";\nimport { TrainingFileFilter, GetModelOptions } from \"../../formTrainingClient\";\n\nimport {\n  ModelStatus,\n  GeneratedClientTrainCustomModelAsyncResponse as TrainCustomModelAsyncResponse\n} from \"../../generated/models\";\nimport { CustomFormModel, FormModelResponse } from \"../../models\";\nexport { ModelStatus, TrainCustomModelAsyncResponse };\n\n/**\n * Defines the operations from a {@link FormRecognizerClient} that are needed for the poller\n * returned by {@link FormRecognizerClient.beginTraining} to work.\n */\nexport type TrainPollerClient = {\n  getCustomModel: (modelId: string, options: GetModelOptions) => Promise<FormModelResponse>;\n  trainCustomModelInternal: (\n    source: string | string[],\n    useLabelFile?: boolean,\n    options?: TrainingFileFilter\n  ) => Promise<TrainCustomModelAsyncResponse>;\n};\n\n/**\n * The state used by the poller returned from {@link FormTrainingClient.beginTraining}.\n *\n * This state is passed into the user-specified `onProgress` callback\n * whenever copy progress is detected.\n */\nexport interface BeginTrainingPollState extends PollOperationState<CustomFormModel> {\n  /**\n   * The accessible url to an Azure Blob Storage container holding the training documents.\n   */\n  trainingInputs: string | string[];\n  /**\n   * The id of the custom form model being created from the training operation.\n   */\n  modelId?: string;\n  /**\n   * the status of the created model.\n   */\n  status: ModelStatus;\n  /**\n   * Option to filter training files.\n   */\n  readonly trainModelOptions?: TrainingFileFilter;\n}\n\nexport interface BeginTrainingPollerOperation\n  extends PollOperation<BeginTrainingPollState, CustomFormModel> {}\n\n/**\n * @internal\n */\nexport interface BeginTrainingPollerOptions {\n  client: TrainPollerClient;\n  trainingInputs: string | string[];\n  updateIntervalInMs?: number;\n  onProgress?: (state: BeginTrainingPollState) => void;\n  resumeFrom?: string;\n  trainModelOptions?: TrainingFileFilter;\n}\n\n/**\n * Class that represents a poller that waits until a model has been trained.\n */\nexport class BeginTrainingPoller extends Poller<BeginTrainingPollState, CustomFormModel> {\n  public updateIntervalInMs: number;\n\n  constructor(options: BeginTrainingPollerOptions) {\n    const {\n      client,\n      trainingInputs,\n      updateIntervalInMs = 5000,\n      onProgress,\n      resumeFrom,\n      trainModelOptions\n    } = options;\n\n    let state: BeginTrainingPollState | undefined;\n\n    if (resumeFrom) {\n      state = JSON.parse(resumeFrom).state;\n    }\n\n    const operation = makeBeginTrainingPollOperation(client, {\n      ...state,\n      trainingInputs,\n      status: \"creating\",\n      trainModelOptions\n    });\n\n    super(operation);\n\n    if (typeof onProgress === \"function\") {\n      this.onProgress(onProgress);\n    }\n\n    this.updateIntervalInMs = updateIntervalInMs;\n  }\n\n  public delay(): Promise<void> {\n    return delay(this.updateIntervalInMs);\n  }\n}\n\n/**\n * Creates a poll operation given the provided state.\n * @internal\n */\nfunction makeBeginTrainingPollOperation(\n  client: TrainPollerClient,\n  state: BeginTrainingPollState\n): BeginTrainingPollerOperation {\n  return {\n    state: { ...state },\n\n    async cancel(_options = {}): Promise<BeginTrainingPollerOperation> {\n      throw new Error(\"Cancel operation is not supported.\");\n    },\n\n    async update(options = {}): Promise<BeginTrainingPollerOperation> {\n      const pollerState = this.state;\n      const { trainingInputs, trainModelOptions } = state;\n\n      if (!pollerState.isStarted) {\n        pollerState.isStarted = true;\n        const result = await client.trainCustomModelInternal(\n          trainingInputs,\n          false,\n          trainModelOptions || {}\n        );\n        if (!result.location) {\n          throw new Error(\"Expect a valid 'operationLocation' to retrieve analyze results\");\n        }\n        const lastSlashIndex = result.location.lastIndexOf(\"/\");\n        pollerState.modelId = result.location.substring(lastSlashIndex + 1);\n      }\n\n      const model = await client.getCustomModel(pollerState.modelId!, {\n        abortSignal: trainModelOptions?.abortSignal\n      });\n\n      pollerState.status = model.status;\n\n      if (!pollerState.isCompleted) {\n        if (typeof options.fireProgress === \"function\") {\n          options.fireProgress(pollerState);\n        }\n\n        if (model.status === \"ready\") {\n          pollerState.result = model;\n          pollerState.isCompleted = true;\n        } else if (model.status === \"invalid\") {\n          const errors = model.errors\n            ?.map((e) => `  code ${e.code}, message: '${e.message}'`)\n            .join(\"\\n\");\n          const additionalInfo = model.trainingDocuments\n            ?.map(\n              (d) =>\n                `  document: ${d.name}, status: ${d.status}, errors: ${d.errors\n                  ?.map((e) => `code ${e.code}, message: '${e.message}'`)\n                  .join(\"\\n\")}`\n            )\n            .join(\"\\n\");\n          const message = `Model training failed. Invalid model was created with id '${\n            pollerState.modelId\n          }'.\nError(s):\n${errors || \"\"}\nAdditional information:\n${additionalInfo || \"\"}\n`;\n          throw new Error(message);\n        }\n      }\n\n      return makeBeginTrainingPollOperation(client, pollerState);\n    },\n\n    toString() {\n      return JSON.stringify({ state: this.state }, (key, value) => {\n        if (key === \"client\") {\n          return undefined;\n        }\n        return value;\n      });\n    }\n  };\n}\n"]}