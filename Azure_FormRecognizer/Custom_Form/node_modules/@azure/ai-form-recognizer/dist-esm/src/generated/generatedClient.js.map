{"version":3,"file":"generatedClient.js","sourceRoot":"","sources":["../../../src/generated/generatedClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport { GeneratedClientContext } from \"./generatedClientContext\";\nimport {\n  GeneratedClientOptionalParams,\n  TrainRequest,\n  GeneratedClientTrainCustomModelAsyncResponse,\n  GeneratedClientGetCustomModelOptionalParams,\n  GeneratedClientGetCustomModelResponse,\n  ContentType,\n  GeneratedClientAnalyzeWithCustomModel$binaryOptionalParams,\n  GeneratedClientAnalyzeWithCustomModel$jsonOptionalParams,\n  GeneratedClientAnalyzeWithCustomModelResponse,\n  GeneratedClientGetAnalyzeFormResultResponse,\n  CopyRequest,\n  GeneratedClientCopyCustomModelResponse,\n  GeneratedClientGetCustomModelCopyResultResponse,\n  GeneratedClientGenerateModelCopyAuthorizationResponse,\n  ComposeRequest,\n  GeneratedClientComposeCustomModelsAsyncResponse,\n  GeneratedClientAnalyzeBusinessCardAsync$binaryOptionalParams,\n  GeneratedClientAnalyzeBusinessCardAsync$jsonOptionalParams,\n  GeneratedClientAnalyzeBusinessCardAsyncResponse,\n  GeneratedClientGetAnalyzeBusinessCardResultResponse,\n  GeneratedClientAnalyzeInvoiceAsync$binaryOptionalParams,\n  GeneratedClientAnalyzeInvoiceAsync$jsonOptionalParams,\n  GeneratedClientAnalyzeInvoiceAsyncResponse,\n  GeneratedClientGetAnalyzeInvoiceResultResponse,\n  GeneratedClientAnalyzeIdDocumentAsync$binaryOptionalParams,\n  GeneratedClientAnalyzeIdDocumentAsync$jsonOptionalParams,\n  GeneratedClientAnalyzeIdDocumentAsyncResponse,\n  GeneratedClientGetAnalyzeIdDocumentResultResponse,\n  GeneratedClientAnalyzeReceiptAsync$binaryOptionalParams,\n  GeneratedClientAnalyzeReceiptAsync$jsonOptionalParams,\n  GeneratedClientAnalyzeReceiptAsyncResponse,\n  GeneratedClientGetAnalyzeReceiptResultResponse,\n  GeneratedClientAnalyzeLayoutAsync$binaryOptionalParams,\n  GeneratedClientAnalyzeLayoutAsync$jsonOptionalParams,\n  GeneratedClientAnalyzeLayoutAsyncResponse,\n  GeneratedClientGetAnalyzeLayoutResultResponse,\n  GeneratedClientListCustomModelsResponse,\n  GeneratedClientGetCustomModelsResponse,\n  GeneratedClientListCustomModelsNextResponse\n} from \"./models\";\n\n/** @hidden */\nexport class GeneratedClient extends GeneratedClientContext {\n  /**\n   * Initializes a new instance of the GeneratedClient class.\n   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:\n   *                 https://westus2.api.cognitive.microsoft.com).\n   * @param options The parameter options\n   */\n  constructor(endpoint: string, options?: GeneratedClientOptionalParams) {\n    super(endpoint, options);\n  }\n\n  /**\n   * Create and train a custom model. The request must include a source parameter that is either an\n   * externally accessible Azure storage blob container Uri (preferably a Shared Access Signature Uri) or\n   * valid path to a data folder in a locally mounted drive. When local paths are specified, they must\n   * follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration\n   * setting value e.g., if '{Mounts:Input}' configuration setting value is '/input' then a valid source\n   * path would be '/input/contosodataset'. All data to be trained is expected to be under the source\n   * folder or sub folders under it. Models are trained using documents that are of the following content\n   * type - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff' or 'image/bmp'. Other type of\n   * content is ignored.\n   * @param trainRequest Training request parameters.\n   * @param options The options parameters.\n   */\n  trainCustomModelAsync(\n    trainRequest: TrainRequest,\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientTrainCustomModelAsyncResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      trainRequest,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      trainCustomModelAsyncOperationSpec\n    ) as Promise<GeneratedClientTrainCustomModelAsyncResponse>;\n  }\n\n  /**\n   * Get detailed information about a custom model.\n   * @param modelId Model identifier.\n   * @param options The options parameters.\n   */\n  getCustomModel(\n    modelId: string,\n    options?: GeneratedClientGetCustomModelOptionalParams\n  ): Promise<GeneratedClientGetCustomModelResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      modelId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getCustomModelOperationSpec\n    ) as Promise<GeneratedClientGetCustomModelResponse>;\n  }\n\n  /**\n   * Mark model for deletion. Model artifacts will be permanently removed within a predetermined period.\n   * @param modelId Model identifier.\n   * @param options The options parameters.\n   */\n  deleteCustomModel(\n    modelId: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<coreHttp.RestResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      modelId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      deleteCustomModelOperationSpec\n    ) as Promise<coreHttp.RestResponse>;\n  }\n\n  /**\n   * Extract key-value pairs, tables, and semantic values from a given document. The input document must\n   * be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png',\n   * 'image/tiff' or 'image/bmp'. Alternatively, use 'application/json' type to specify the location (Uri\n   * or local path) of the document to be analyzed.\n   * @param modelId Model identifier.\n   * @param contentType Upload file type\n   * @param fileStream .json, .pdf, .jpg, .png, .tiff or .bmp type file stream.\n   * @param options The options parameters.\n   */\n  analyzeWithCustomModel(\n    modelId: string,\n    contentType: ContentType,\n    fileStream: coreHttp.HttpRequestBody,\n    options?: GeneratedClientAnalyzeWithCustomModel$binaryOptionalParams\n  ): Promise<GeneratedClientAnalyzeWithCustomModelResponse>;\n  /**\n   * Extract key-value pairs, tables, and semantic values from a given document. The input document must\n   * be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png',\n   * 'image/tiff' or 'image/bmp'. Alternatively, use 'application/json' type to specify the location (Uri\n   * or local path) of the document to be analyzed.\n   * @param modelId Model identifier.\n   * @param contentType Body Parameter content-type\n   * @param options The options parameters.\n   */\n  analyzeWithCustomModel(\n    modelId: string,\n    contentType: \"application/json\",\n    options?: GeneratedClientAnalyzeWithCustomModel$jsonOptionalParams\n  ): Promise<GeneratedClientAnalyzeWithCustomModelResponse>;\n  /**\n   * Extract key-value pairs, tables, and semantic values from a given document. The input document must\n   * be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png',\n   * 'image/tiff' or 'image/bmp'. Alternatively, use 'application/json' type to specify the location (Uri\n   * or local path) of the document to be analyzed.\n   * @param args Includes all the parameters for this operation.\n   */\n  analyzeWithCustomModel(\n    ...args:\n      | [\n          string,\n          ContentType,\n          coreHttp.HttpRequestBody,\n          GeneratedClientAnalyzeWithCustomModel$binaryOptionalParams?\n        ]\n      | [\n          string,\n          \"application/json\",\n          GeneratedClientAnalyzeWithCustomModel$jsonOptionalParams?\n        ]\n  ): Promise<GeneratedClientAnalyzeWithCustomModelResponse> {\n    let operationSpec: coreHttp.OperationSpec;\n    let operationArguments: coreHttp.OperationArguments;\n    if (\n      args[1] === \"application/pdf\" ||\n      args[1] === \"image/bmp\" ||\n      args[1] === \"image/jpeg\" ||\n      args[1] === \"image/png\" ||\n      args[1] === \"image/tiff\"\n    ) {\n      operationSpec = analyzeWithCustomModel$binaryOperationSpec;\n      operationArguments = {\n        modelId: args[0],\n        contentType: args[1],\n        fileStream: args[2],\n        options: args[3]\n      };\n    } else if (args[1] === \"application/json\") {\n      operationSpec = analyzeWithCustomModel$jsonOperationSpec;\n      operationArguments = {\n        modelId: args[0],\n        contentType: args[1],\n        options: args[2]\n      };\n    } else {\n      throw new TypeError(\n        `\"contentType\" must be a valid value but instead was \"${args[1]}\".`\n      );\n    }\n    operationArguments.options = coreHttp.operationOptionsToRequestOptionsBase(\n      operationArguments.options || {}\n    );\n    return this.sendOperationRequest(\n      operationArguments,\n      operationSpec\n    ) as Promise<GeneratedClientAnalyzeWithCustomModelResponse>;\n  }\n\n  /**\n   * Obtain current status and the result of the analyze form operation.\n   * @param modelId Model identifier.\n   * @param resultId Analyze operation result identifier.\n   * @param options The options parameters.\n   */\n  getAnalyzeFormResult(\n    modelId: string,\n    resultId: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientGetAnalyzeFormResultResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      modelId,\n      resultId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getAnalyzeFormResultOperationSpec\n    ) as Promise<GeneratedClientGetAnalyzeFormResultResponse>;\n  }\n\n  /**\n   * Copy custom model stored in this resource (the source) to user specified target Form Recognizer\n   * resource.\n   * @param modelId Model identifier.\n   * @param copyRequest Copy request parameters.\n   * @param options The options parameters.\n   */\n  copyCustomModel(\n    modelId: string,\n    copyRequest: CopyRequest,\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientCopyCustomModelResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      modelId,\n      copyRequest,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      copyCustomModelOperationSpec\n    ) as Promise<GeneratedClientCopyCustomModelResponse>;\n  }\n\n  /**\n   * Obtain current status and the result of a custom model copy operation.\n   * @param modelId Model identifier.\n   * @param resultId Copy operation result identifier.\n   * @param options The options parameters.\n   */\n  getCustomModelCopyResult(\n    modelId: string,\n    resultId: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientGetCustomModelCopyResultResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      modelId,\n      resultId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getCustomModelCopyResultOperationSpec\n    ) as Promise<GeneratedClientGetCustomModelCopyResultResponse>;\n  }\n\n  /**\n   * Generate authorization to copy a model into the target Form Recognizer resource.\n   * @param options The options parameters.\n   */\n  generateModelCopyAuthorization(\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientGenerateModelCopyAuthorizationResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      generateModelCopyAuthorizationOperationSpec\n    ) as Promise<GeneratedClientGenerateModelCopyAuthorizationResponse>;\n  }\n\n  /**\n   * Compose request would include list of models ids.\n   * It would validate what all models either trained with labels model or composed model.\n   * It would validate limit of models put together.\n   * @param composeRequest Compose models\n   * @param options The options parameters.\n   */\n  composeCustomModelsAsync(\n    composeRequest: ComposeRequest,\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientComposeCustomModelsAsyncResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      composeRequest,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      composeCustomModelsAsyncOperationSpec\n    ) as Promise<GeneratedClientComposeCustomModelsAsyncResponse>;\n  }\n\n  /**\n   * Extract field text and semantic values from a given business card document. The input document must\n   * be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png',\n   * 'image/tiff' or 'image/bmp'. Alternatively, use 'application/json' type to specify the location\n   * (Uri) of the document to be analyzed.\n   * @param contentType Upload file type\n   * @param fileStream .json, .pdf, .jpg, .png, .tiff or .bmp type file stream.\n   * @param options The options parameters.\n   */\n  analyzeBusinessCardAsync(\n    contentType: ContentType,\n    fileStream: coreHttp.HttpRequestBody,\n    options?: GeneratedClientAnalyzeBusinessCardAsync$binaryOptionalParams\n  ): Promise<GeneratedClientAnalyzeBusinessCardAsyncResponse>;\n  /**\n   * Extract field text and semantic values from a given business card document. The input document must\n   * be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png',\n   * 'image/tiff' or 'image/bmp'. Alternatively, use 'application/json' type to specify the location\n   * (Uri) of the document to be analyzed.\n   * @param contentType Body Parameter content-type\n   * @param options The options parameters.\n   */\n  analyzeBusinessCardAsync(\n    contentType: \"application/json\",\n    options?: GeneratedClientAnalyzeBusinessCardAsync$jsonOptionalParams\n  ): Promise<GeneratedClientAnalyzeBusinessCardAsyncResponse>;\n  /**\n   * Extract field text and semantic values from a given business card document. The input document must\n   * be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png',\n   * 'image/tiff' or 'image/bmp'. Alternatively, use 'application/json' type to specify the location\n   * (Uri) of the document to be analyzed.\n   * @param args Includes all the parameters for this operation.\n   */\n  analyzeBusinessCardAsync(\n    ...args:\n      | [\n          ContentType,\n          coreHttp.HttpRequestBody,\n          GeneratedClientAnalyzeBusinessCardAsync$binaryOptionalParams?\n        ]\n      | [\n          \"application/json\",\n          GeneratedClientAnalyzeBusinessCardAsync$jsonOptionalParams?\n        ]\n  ): Promise<GeneratedClientAnalyzeBusinessCardAsyncResponse> {\n    let operationSpec: coreHttp.OperationSpec;\n    let operationArguments: coreHttp.OperationArguments;\n    if (\n      args[0] === \"application/pdf\" ||\n      args[0] === \"image/bmp\" ||\n      args[0] === \"image/jpeg\" ||\n      args[0] === \"image/png\" ||\n      args[0] === \"image/tiff\"\n    ) {\n      operationSpec = analyzeBusinessCardAsync$binaryOperationSpec;\n      operationArguments = {\n        contentType: args[0],\n        fileStream: args[1],\n        options: args[2]\n      };\n    } else if (args[0] === \"application/json\") {\n      operationSpec = analyzeBusinessCardAsync$jsonOperationSpec;\n      operationArguments = { contentType: args[0], options: args[1] };\n    } else {\n      throw new TypeError(\n        `\"contentType\" must be a valid value but instead was \"${args[0]}\".`\n      );\n    }\n    operationArguments.options = coreHttp.operationOptionsToRequestOptionsBase(\n      operationArguments.options || {}\n    );\n    return this.sendOperationRequest(\n      operationArguments,\n      operationSpec\n    ) as Promise<GeneratedClientAnalyzeBusinessCardAsyncResponse>;\n  }\n\n  /**\n   * Track the progress and obtain the result of the analyze business card operation.\n   * @param resultId Analyze operation result identifier.\n   * @param options The options parameters.\n   */\n  getAnalyzeBusinessCardResult(\n    resultId: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientGetAnalyzeBusinessCardResultResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      resultId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getAnalyzeBusinessCardResultOperationSpec\n    ) as Promise<GeneratedClientGetAnalyzeBusinessCardResultResponse>;\n  }\n\n  /**\n   * Extract field text and semantic values from a given invoice document. The input document must be of\n   * one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff' or\n   * 'image/bmp'. Alternatively, use 'application/json' type to specify the location (Uri) of the\n   * document to be analyzed.\n   * @param contentType Upload file type\n   * @param fileStream .json, .pdf, .jpg, .png, .tiff or .bmp type file stream.\n   * @param options The options parameters.\n   */\n  analyzeInvoiceAsync(\n    contentType: ContentType,\n    fileStream: coreHttp.HttpRequestBody,\n    options?: GeneratedClientAnalyzeInvoiceAsync$binaryOptionalParams\n  ): Promise<GeneratedClientAnalyzeInvoiceAsyncResponse>;\n  /**\n   * Extract field text and semantic values from a given invoice document. The input document must be of\n   * one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff' or\n   * 'image/bmp'. Alternatively, use 'application/json' type to specify the location (Uri) of the\n   * document to be analyzed.\n   * @param contentType Body Parameter content-type\n   * @param options The options parameters.\n   */\n  analyzeInvoiceAsync(\n    contentType: \"application/json\",\n    options?: GeneratedClientAnalyzeInvoiceAsync$jsonOptionalParams\n  ): Promise<GeneratedClientAnalyzeInvoiceAsyncResponse>;\n  /**\n   * Extract field text and semantic values from a given invoice document. The input document must be of\n   * one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff' or\n   * 'image/bmp'. Alternatively, use 'application/json' type to specify the location (Uri) of the\n   * document to be analyzed.\n   * @param args Includes all the parameters for this operation.\n   */\n  analyzeInvoiceAsync(\n    ...args:\n      | [\n          ContentType,\n          coreHttp.HttpRequestBody,\n          GeneratedClientAnalyzeInvoiceAsync$binaryOptionalParams?\n        ]\n      | [\n          \"application/json\",\n          GeneratedClientAnalyzeInvoiceAsync$jsonOptionalParams?\n        ]\n  ): Promise<GeneratedClientAnalyzeInvoiceAsyncResponse> {\n    let operationSpec: coreHttp.OperationSpec;\n    let operationArguments: coreHttp.OperationArguments;\n    if (\n      args[0] === \"application/pdf\" ||\n      args[0] === \"image/bmp\" ||\n      args[0] === \"image/jpeg\" ||\n      args[0] === \"image/png\" ||\n      args[0] === \"image/tiff\"\n    ) {\n      operationSpec = analyzeInvoiceAsync$binaryOperationSpec;\n      operationArguments = {\n        contentType: args[0],\n        fileStream: args[1],\n        options: args[2]\n      };\n    } else if (args[0] === \"application/json\") {\n      operationSpec = analyzeInvoiceAsync$jsonOperationSpec;\n      operationArguments = { contentType: args[0], options: args[1] };\n    } else {\n      throw new TypeError(\n        `\"contentType\" must be a valid value but instead was \"${args[0]}\".`\n      );\n    }\n    operationArguments.options = coreHttp.operationOptionsToRequestOptionsBase(\n      operationArguments.options || {}\n    );\n    return this.sendOperationRequest(\n      operationArguments,\n      operationSpec\n    ) as Promise<GeneratedClientAnalyzeInvoiceAsyncResponse>;\n  }\n\n  /**\n   * Track the progress and obtain the result of the analyze invoice operation.\n   * @param resultId Analyze operation result identifier.\n   * @param options The options parameters.\n   */\n  getAnalyzeInvoiceResult(\n    resultId: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientGetAnalyzeInvoiceResultResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      resultId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getAnalyzeInvoiceResultOperationSpec\n    ) as Promise<GeneratedClientGetAnalyzeInvoiceResultResponse>;\n  }\n\n  /**\n   * Extract field text and semantic values from a given ID document. The input document must be of one\n   * of the supported content types - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff' or\n   * 'image/bmp'. Alternatively, use 'application/json' type to specify the location (Uri) of the\n   * document to be analyzed.\n   * @param contentType Upload file type\n   * @param fileStream .json, .pdf, .jpg, .png, .tiff or .bmp type file stream.\n   * @param options The options parameters.\n   */\n  analyzeIdDocumentAsync(\n    contentType: ContentType,\n    fileStream: coreHttp.HttpRequestBody,\n    options?: GeneratedClientAnalyzeIdDocumentAsync$binaryOptionalParams\n  ): Promise<GeneratedClientAnalyzeIdDocumentAsyncResponse>;\n  /**\n   * Extract field text and semantic values from a given ID document. The input document must be of one\n   * of the supported content types - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff' or\n   * 'image/bmp'. Alternatively, use 'application/json' type to specify the location (Uri) of the\n   * document to be analyzed.\n   * @param contentType Body Parameter content-type\n   * @param options The options parameters.\n   */\n  analyzeIdDocumentAsync(\n    contentType: \"application/json\",\n    options?: GeneratedClientAnalyzeIdDocumentAsync$jsonOptionalParams\n  ): Promise<GeneratedClientAnalyzeIdDocumentAsyncResponse>;\n  /**\n   * Extract field text and semantic values from a given ID document. The input document must be of one\n   * of the supported content types - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff' or\n   * 'image/bmp'. Alternatively, use 'application/json' type to specify the location (Uri) of the\n   * document to be analyzed.\n   * @param args Includes all the parameters for this operation.\n   */\n  analyzeIdDocumentAsync(\n    ...args:\n      | [\n          ContentType,\n          coreHttp.HttpRequestBody,\n          GeneratedClientAnalyzeIdDocumentAsync$binaryOptionalParams?\n        ]\n      | [\n          \"application/json\",\n          GeneratedClientAnalyzeIdDocumentAsync$jsonOptionalParams?\n        ]\n  ): Promise<GeneratedClientAnalyzeIdDocumentAsyncResponse> {\n    let operationSpec: coreHttp.OperationSpec;\n    let operationArguments: coreHttp.OperationArguments;\n    if (\n      args[0] === \"application/pdf\" ||\n      args[0] === \"image/bmp\" ||\n      args[0] === \"image/jpeg\" ||\n      args[0] === \"image/png\" ||\n      args[0] === \"image/tiff\"\n    ) {\n      operationSpec = analyzeIdDocumentAsync$binaryOperationSpec;\n      operationArguments = {\n        contentType: args[0],\n        fileStream: args[1],\n        options: args[2]\n      };\n    } else if (args[0] === \"application/json\") {\n      operationSpec = analyzeIdDocumentAsync$jsonOperationSpec;\n      operationArguments = { contentType: args[0], options: args[1] };\n    } else {\n      throw new TypeError(\n        `\"contentType\" must be a valid value but instead was \"${args[0]}\".`\n      );\n    }\n    operationArguments.options = coreHttp.operationOptionsToRequestOptionsBase(\n      operationArguments.options || {}\n    );\n    return this.sendOperationRequest(\n      operationArguments,\n      operationSpec\n    ) as Promise<GeneratedClientAnalyzeIdDocumentAsyncResponse>;\n  }\n\n  /**\n   * Track the progress and obtain the result of the analyze ID operation.\n   * @param resultId Analyze operation result identifier.\n   * @param options The options parameters.\n   */\n  getAnalyzeIdDocumentResult(\n    resultId: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientGetAnalyzeIdDocumentResultResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      resultId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getAnalyzeIdDocumentResultOperationSpec\n    ) as Promise<GeneratedClientGetAnalyzeIdDocumentResultResponse>;\n  }\n\n  /**\n   * Extract field text and semantic values from a given receipt document. The input document must be of\n   * one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff' or\n   * 'image/bmp'. Alternatively, use 'application/json' type to specify the location (Uri) of the\n   * document to be analyzed.\n   * @param contentType Upload file type\n   * @param fileStream .json, .pdf, .jpg, .png, .tiff or .bmp type file stream.\n   * @param options The options parameters.\n   */\n  analyzeReceiptAsync(\n    contentType: ContentType,\n    fileStream: coreHttp.HttpRequestBody,\n    options?: GeneratedClientAnalyzeReceiptAsync$binaryOptionalParams\n  ): Promise<GeneratedClientAnalyzeReceiptAsyncResponse>;\n  /**\n   * Extract field text and semantic values from a given receipt document. The input document must be of\n   * one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff' or\n   * 'image/bmp'. Alternatively, use 'application/json' type to specify the location (Uri) of the\n   * document to be analyzed.\n   * @param contentType Body Parameter content-type\n   * @param options The options parameters.\n   */\n  analyzeReceiptAsync(\n    contentType: \"application/json\",\n    options?: GeneratedClientAnalyzeReceiptAsync$jsonOptionalParams\n  ): Promise<GeneratedClientAnalyzeReceiptAsyncResponse>;\n  /**\n   * Extract field text and semantic values from a given receipt document. The input document must be of\n   * one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff' or\n   * 'image/bmp'. Alternatively, use 'application/json' type to specify the location (Uri) of the\n   * document to be analyzed.\n   * @param args Includes all the parameters for this operation.\n   */\n  analyzeReceiptAsync(\n    ...args:\n      | [\n          ContentType,\n          coreHttp.HttpRequestBody,\n          GeneratedClientAnalyzeReceiptAsync$binaryOptionalParams?\n        ]\n      | [\n          \"application/json\",\n          GeneratedClientAnalyzeReceiptAsync$jsonOptionalParams?\n        ]\n  ): Promise<GeneratedClientAnalyzeReceiptAsyncResponse> {\n    let operationSpec: coreHttp.OperationSpec;\n    let operationArguments: coreHttp.OperationArguments;\n    if (\n      args[0] === \"application/pdf\" ||\n      args[0] === \"image/bmp\" ||\n      args[0] === \"image/jpeg\" ||\n      args[0] === \"image/png\" ||\n      args[0] === \"image/tiff\"\n    ) {\n      operationSpec = analyzeReceiptAsync$binaryOperationSpec;\n      operationArguments = {\n        contentType: args[0],\n        fileStream: args[1],\n        options: args[2]\n      };\n    } else if (args[0] === \"application/json\") {\n      operationSpec = analyzeReceiptAsync$jsonOperationSpec;\n      operationArguments = { contentType: args[0], options: args[1] };\n    } else {\n      throw new TypeError(\n        `\"contentType\" must be a valid value but instead was \"${args[0]}\".`\n      );\n    }\n    operationArguments.options = coreHttp.operationOptionsToRequestOptionsBase(\n      operationArguments.options || {}\n    );\n    return this.sendOperationRequest(\n      operationArguments,\n      operationSpec\n    ) as Promise<GeneratedClientAnalyzeReceiptAsyncResponse>;\n  }\n\n  /**\n   * Track the progress and obtain the result of the analyze receipt operation.\n   * @param resultId Analyze operation result identifier.\n   * @param options The options parameters.\n   */\n  getAnalyzeReceiptResult(\n    resultId: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientGetAnalyzeReceiptResultResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      resultId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getAnalyzeReceiptResultOperationSpec\n    ) as Promise<GeneratedClientGetAnalyzeReceiptResultResponse>;\n  }\n\n  /**\n   * Extract text and layout information from a given document. The input document must be of one of the\n   * supported content types - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff' or 'image/bmp'.\n   * Alternatively, use 'application/json' type to specify the location (Uri or local path) of the\n   * document to be analyzed.\n   * @param contentType Upload file type\n   * @param fileStream .json, .pdf, .jpg, .png, .tiff or .bmp type file stream.\n   * @param options The options parameters.\n   */\n  analyzeLayoutAsync(\n    contentType: ContentType,\n    fileStream: coreHttp.HttpRequestBody,\n    options?: GeneratedClientAnalyzeLayoutAsync$binaryOptionalParams\n  ): Promise<GeneratedClientAnalyzeLayoutAsyncResponse>;\n  /**\n   * Extract text and layout information from a given document. The input document must be of one of the\n   * supported content types - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff' or 'image/bmp'.\n   * Alternatively, use 'application/json' type to specify the location (Uri or local path) of the\n   * document to be analyzed.\n   * @param contentType Body Parameter content-type\n   * @param options The options parameters.\n   */\n  analyzeLayoutAsync(\n    contentType: \"application/json\",\n    options?: GeneratedClientAnalyzeLayoutAsync$jsonOptionalParams\n  ): Promise<GeneratedClientAnalyzeLayoutAsyncResponse>;\n  /**\n   * Extract text and layout information from a given document. The input document must be of one of the\n   * supported content types - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff' or 'image/bmp'.\n   * Alternatively, use 'application/json' type to specify the location (Uri or local path) of the\n   * document to be analyzed.\n   * @param args Includes all the parameters for this operation.\n   */\n  analyzeLayoutAsync(\n    ...args:\n      | [\n          ContentType,\n          coreHttp.HttpRequestBody,\n          GeneratedClientAnalyzeLayoutAsync$binaryOptionalParams?\n        ]\n      | [\n          \"application/json\",\n          GeneratedClientAnalyzeLayoutAsync$jsonOptionalParams?\n        ]\n  ): Promise<GeneratedClientAnalyzeLayoutAsyncResponse> {\n    let operationSpec: coreHttp.OperationSpec;\n    let operationArguments: coreHttp.OperationArguments;\n    if (\n      args[0] === \"application/pdf\" ||\n      args[0] === \"image/bmp\" ||\n      args[0] === \"image/jpeg\" ||\n      args[0] === \"image/png\" ||\n      args[0] === \"image/tiff\"\n    ) {\n      operationSpec = analyzeLayoutAsync$binaryOperationSpec;\n      operationArguments = {\n        contentType: args[0],\n        fileStream: args[1],\n        options: args[2]\n      };\n    } else if (args[0] === \"application/json\") {\n      operationSpec = analyzeLayoutAsync$jsonOperationSpec;\n      operationArguments = { contentType: args[0], options: args[1] };\n    } else {\n      throw new TypeError(\n        `\"contentType\" must be a valid value but instead was \"${args[0]}\".`\n      );\n    }\n    operationArguments.options = coreHttp.operationOptionsToRequestOptionsBase(\n      operationArguments.options || {}\n    );\n    return this.sendOperationRequest(\n      operationArguments,\n      operationSpec\n    ) as Promise<GeneratedClientAnalyzeLayoutAsyncResponse>;\n  }\n\n  /**\n   * Track the progress and obtain the result of the analyze layout operation\n   * @param resultId Analyze operation result identifier.\n   * @param options The options parameters.\n   */\n  getAnalyzeLayoutResult(\n    resultId: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientGetAnalyzeLayoutResultResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      resultId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getAnalyzeLayoutResultOperationSpec\n    ) as Promise<GeneratedClientGetAnalyzeLayoutResultResponse>;\n  }\n\n  /**\n   * Get information about all custom models\n   * @param options The options parameters.\n   */\n  listCustomModels(\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientListCustomModelsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      listCustomModelsOperationSpec\n    ) as Promise<GeneratedClientListCustomModelsResponse>;\n  }\n\n  /**\n   * Get information about all custom models\n   * @param options The options parameters.\n   */\n  getCustomModels(\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientGetCustomModelsResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      getCustomModelsOperationSpec\n    ) as Promise<GeneratedClientGetCustomModelsResponse>;\n  }\n\n  /**\n   * ListCustomModelsNext\n   * @param nextLink The nextLink from the previous successful call to the ListCustomModels method.\n   * @param options The options parameters.\n   */\n  listCustomModelsNext(\n    nextLink: string,\n    options?: coreHttp.OperationOptions\n  ): Promise<GeneratedClientListCustomModelsNextResponse> {\n    const operationArguments: coreHttp.OperationArguments = {\n      nextLink,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    return this.sendOperationRequest(\n      operationArguments,\n      listCustomModelsNextOperationSpec\n    ) as Promise<GeneratedClientListCustomModelsNextResponse>;\n  }\n}\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst trainCustomModelAsyncOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      headersMapper: Mappers.GeneratedClientTrainCustomModelAsyncHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.trainRequest,\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getCustomModelOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models/{modelId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Model\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.includeKeys],\n  urlParameters: [Parameters.endpoint, Parameters.modelId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst deleteCustomModelOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models/{modelId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [Parameters.endpoint, Parameters.modelId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst analyzeWithCustomModel$binaryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models/{modelId}/analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeWithCustomModelHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.fileStream,\n  queryParameters: [Parameters.includeTextDetails, Parameters.pages],\n  urlParameters: [Parameters.endpoint, Parameters.modelId],\n  headerParameters: [Parameters.contentType1, Parameters.accept1],\n  mediaType: \"binary\",\n  serializer\n};\nconst analyzeWithCustomModel$jsonOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models/{modelId}/analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeWithCustomModelHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.fileStream1,\n  queryParameters: [Parameters.includeTextDetails, Parameters.pages],\n  urlParameters: [Parameters.endpoint, Parameters.modelId],\n  headerParameters: [Parameters.accept, Parameters.contentType2],\n  mediaType: \"json\",\n  serializer\n};\nconst getAnalyzeFormResultOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models/{modelId}/analyzeResults/{resultId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalyzeOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [Parameters.endpoint, Parameters.modelId, Parameters.resultId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst copyCustomModelOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models/{modelId}/copy\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientCopyCustomModelHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.copyRequest,\n  urlParameters: [Parameters.endpoint, Parameters.modelId],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getCustomModelCopyResultOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models/{modelId}/copyResults/{resultId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CopyOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [Parameters.endpoint, Parameters.modelId, Parameters.resultId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst generateModelCopyAuthorizationOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models/copyAuthorization\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.CopyAuthorizationResult,\n      headersMapper:\n        Mappers.GeneratedClientGenerateModelCopyAuthorizationHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst composeCustomModelsAsyncOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models/compose\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      headersMapper: Mappers.GeneratedClientComposeCustomModelsAsyncHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.composeRequest,\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType, Parameters.accept2],\n  mediaType: \"json\",\n  serializer\n};\nconst analyzeBusinessCardAsync$binaryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/prebuilt/businessCard/analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeBusinessCardAsyncHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.fileStream,\n  queryParameters: [\n    Parameters.includeTextDetails,\n    Parameters.pages,\n    Parameters.locale\n  ],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType1, Parameters.accept1],\n  mediaType: \"binary\",\n  serializer\n};\nconst analyzeBusinessCardAsync$jsonOperationSpec: coreHttp.OperationSpec = {\n  path: \"/prebuilt/businessCard/analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeBusinessCardAsyncHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.fileStream1,\n  queryParameters: [\n    Parameters.includeTextDetails,\n    Parameters.pages,\n    Parameters.locale\n  ],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.contentType2],\n  mediaType: \"json\",\n  serializer\n};\nconst getAnalyzeBusinessCardResultOperationSpec: coreHttp.OperationSpec = {\n  path: \"/prebuilt/businessCard/analyzeResults/{resultId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalyzeOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [Parameters.endpoint, Parameters.resultId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst analyzeInvoiceAsync$binaryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/prebuilt/invoice/analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeInvoiceAsyncHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.fileStream,\n  queryParameters: [\n    Parameters.includeTextDetails,\n    Parameters.pages,\n    Parameters.locale\n  ],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType1, Parameters.accept1],\n  mediaType: \"binary\",\n  serializer\n};\nconst analyzeInvoiceAsync$jsonOperationSpec: coreHttp.OperationSpec = {\n  path: \"/prebuilt/invoice/analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeInvoiceAsyncHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.fileStream1,\n  queryParameters: [\n    Parameters.includeTextDetails,\n    Parameters.pages,\n    Parameters.locale\n  ],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.contentType2],\n  mediaType: \"json\",\n  serializer\n};\nconst getAnalyzeInvoiceResultOperationSpec: coreHttp.OperationSpec = {\n  path: \"/prebuilt/invoice/analyzeResults/{resultId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalyzeOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [Parameters.endpoint, Parameters.resultId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst analyzeIdDocumentAsync$binaryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/prebuilt/idDocument/analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeIdDocumentAsyncHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.fileStream,\n  queryParameters: [Parameters.includeTextDetails, Parameters.pages],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType1, Parameters.accept1],\n  mediaType: \"binary\",\n  serializer\n};\nconst analyzeIdDocumentAsync$jsonOperationSpec: coreHttp.OperationSpec = {\n  path: \"/prebuilt/idDocument/analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeIdDocumentAsyncHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.fileStream1,\n  queryParameters: [Parameters.includeTextDetails, Parameters.pages],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.contentType2],\n  mediaType: \"json\",\n  serializer\n};\nconst getAnalyzeIdDocumentResultOperationSpec: coreHttp.OperationSpec = {\n  path: \"/prebuilt/idDocument/analyzeResults/{resultId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalyzeOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [Parameters.endpoint, Parameters.resultId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst analyzeReceiptAsync$binaryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/prebuilt/receipt/analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeReceiptAsyncHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.fileStream,\n  queryParameters: [\n    Parameters.includeTextDetails,\n    Parameters.pages,\n    Parameters.locale\n  ],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType1, Parameters.accept1],\n  mediaType: \"binary\",\n  serializer\n};\nconst analyzeReceiptAsync$jsonOperationSpec: coreHttp.OperationSpec = {\n  path: \"/prebuilt/receipt/analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeReceiptAsyncHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.fileStream1,\n  queryParameters: [\n    Parameters.includeTextDetails,\n    Parameters.pages,\n    Parameters.locale\n  ],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.contentType2],\n  mediaType: \"json\",\n  serializer\n};\nconst getAnalyzeReceiptResultOperationSpec: coreHttp.OperationSpec = {\n  path: \"/prebuilt/receipt/analyzeResults/{resultId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalyzeOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [Parameters.endpoint, Parameters.resultId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst analyzeLayoutAsync$binaryOperationSpec: coreHttp.OperationSpec = {\n  path: \"/layout/analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeLayoutAsyncHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.fileStream,\n  queryParameters: [\n    Parameters.pages,\n    Parameters.language,\n    Parameters.readingOrder\n  ],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType1, Parameters.accept1],\n  mediaType: \"binary\",\n  serializer\n};\nconst analyzeLayoutAsync$jsonOperationSpec: coreHttp.OperationSpec = {\n  path: \"/layout/analyze\",\n  httpMethod: \"POST\",\n  responses: {\n    202: {\n      headersMapper: Mappers.GeneratedClientAnalyzeLayoutAsyncHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  requestBody: Parameters.fileStream1,\n  queryParameters: [\n    Parameters.pages,\n    Parameters.language,\n    Parameters.readingOrder\n  ],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.contentType2],\n  mediaType: \"json\",\n  serializer\n};\nconst getAnalyzeLayoutResultOperationSpec: coreHttp.OperationSpec = {\n  path: \"/layout/analyzeResults/{resultId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AnalyzeOperationResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  urlParameters: [Parameters.endpoint, Parameters.resultId],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listCustomModelsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Models\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.op],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getCustomModelsOperationSpec: coreHttp.OperationSpec = {\n  path: \"/custom/models\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Models\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.op1],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst listCustomModelsNextOperationSpec: coreHttp.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Models\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse\n    }\n  },\n  queryParameters: [Parameters.op],\n  urlParameters: [Parameters.endpoint, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"]}