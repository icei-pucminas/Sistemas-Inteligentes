/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { TrainRequest as TrainRequestMapper, SourcePath as SourcePathMapper, CopyRequest as CopyRequestMapper, ComposeRequest as ComposeRequestMapper } from "../models/mappers";
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const trainRequest = {
    parameterPath: "trainRequest",
    mapper: TrainRequestMapper
};
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const endpoint = {
    parameterPath: "endpoint",
    mapper: {
        serializedName: "endpoint",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
export const modelId = {
    parameterPath: "modelId",
    mapper: {
        serializedName: "modelId",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};
export const includeKeys = {
    parameterPath: ["options", "includeKeys"],
    mapper: {
        serializedName: "includeKeys",
        type: {
            name: "Boolean"
        }
    }
};
export const contentType1 = {
    parameterPath: "contentType",
    mapper: {
        serializedName: "Content-Type",
        required: true,
        type: {
            name: "Enum",
            allowedValues: [
                "application/pdf",
                "image/bmp",
                "image/jpeg",
                "image/png",
                "image/tiff"
            ]
        }
    }
};
export const fileStream = {
    parameterPath: "fileStream",
    mapper: {
        serializedName: "fileStream",
        required: true,
        type: {
            name: "Stream"
        }
    }
};
export const accept1 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const contentType2 = {
    parameterPath: "contentType",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
export const fileStream1 = {
    parameterPath: ["options", "fileStream"],
    mapper: SourcePathMapper
};
export const includeTextDetails = {
    parameterPath: ["options", "includeTextDetails"],
    mapper: {
        serializedName: "includeTextDetails",
        type: {
            name: "Boolean"
        }
    }
};
export const pages = {
    parameterPath: ["options", "pages"],
    mapper: {
        serializedName: "pages",
        type: {
            name: "Sequence",
            element: {
                constraints: {
                    Pattern: new RegExp("(^[0-9]+-[0-9]+$)|(^[0-9]+$)")
                },
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const resultId = {
    parameterPath: "resultId",
    mapper: {
        serializedName: "resultId",
        required: true,
        type: {
            name: "Uuid"
        }
    }
};
export const copyRequest = {
    parameterPath: "copyRequest",
    mapper: CopyRequestMapper
};
export const composeRequest = {
    parameterPath: "composeRequest",
    mapper: ComposeRequestMapper
};
export const accept2 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json, text/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
export const locale = {
    parameterPath: ["options", "locale"],
    mapper: {
        serializedName: "locale",
        type: {
            name: "String"
        }
    }
};
export const language = {
    parameterPath: ["options", "language"],
    mapper: {
        serializedName: "language",
        type: {
            name: "String"
        }
    }
};
export const readingOrder = {
    parameterPath: ["options", "readingOrder"],
    mapper: {
        defaultValue: "basic",
        serializedName: "readingOrder",
        type: {
            name: "Enum",
            allowedValues: ["basic", "natural"]
        }
    }
};
export const op = {
    parameterPath: "op",
    mapper: {
        defaultValue: "full",
        isConstant: true,
        serializedName: "op",
        type: {
            name: "String"
        }
    }
};
export const op1 = {
    parameterPath: "op",
    mapper: {
        defaultValue: "summary",
        isConstant: true,
        serializedName: "op",
        type: {
            name: "String"
        }
    }
};
export const nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
//# sourceMappingURL=parameters.js.map