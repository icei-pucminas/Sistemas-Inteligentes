{"version":3,"file":"azureKeyCredentialPolicy.js","sourceRoot":"","sources":["../../src/azureKeyCredentialPolicy.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAGlC,OAAO,EAIL,iBAAiB,EAIlB,MAAM,kBAAkB,CAAC;AAE1B,MAAM,mBAAmB,GAAG,2BAA2B,CAAC;AAExD;;;GAGG;AACH,MAAM,UAAU,4CAA4C,CAC1D,UAAyB;IAEzB,OAAO;QACL,MAAM,EAAE,CAAC,UAAyB,EAAE,OAA6B,EAAE,EAAE;YACnE,OAAO,IAAI,sCAAsC,CAAC,UAAU,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;QACrF,CAAC;KACF,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,MAAM,sCAAuC,SAAQ,iBAAiB;IAGpE,YACE,UAAyB,EACzB,OAAiC,EACjC,UAAyB;QAEzB,KAAK,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAEY,WAAW,CAAC,WAA4B;;YACnD,IAAI,CAAC,WAAW,EAAE;gBAChB,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;aAC5D;YAED,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YAClE,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QACnD,CAAC;KAAA;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential } from \"@azure/core-auth\";\nimport {\n  RequestPolicyFactory,\n  RequestPolicy,\n  RequestPolicyOptions,\n  BaseRequestPolicy,\n  HttpOperationResponse,\n  RequestPolicyOptionsLike,\n  WebResourceLike\n} from \"@azure/core-http\";\n\nconst API_KEY_HEADER_NAME = \"Ocp-Apim-Subscription-Key\";\n\n/**\n * Create an HTTP pipeline policy to authenticate a request\n * using an `AzureKeyCredential` for Azure Form Recognizer\n */\nexport function createFormRecognizerAzureKeyCredentialPolicy(\n  credential: KeyCredential\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new FormRecognizerAzureKeyCredentialPolicy(nextPolicy, options, credential);\n    }\n  };\n}\n\n/**\n * A concrete implementation of an AzureKeyCredential policy\n * using the appropriate header for Azure Form Recognizer\n */\nclass FormRecognizerAzureKeyCredentialPolicy extends BaseRequestPolicy {\n  private credential: KeyCredential;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptionsLike,\n    credential: KeyCredential\n  ) {\n    super(nextPolicy, options);\n    this.credential = credential;\n  }\n\n  public async sendRequest(webResource: WebResourceLike): Promise<HttpOperationResponse> {\n    if (!webResource) {\n      throw new Error(\"webResource cannot be null or undefined\");\n    }\n\n    webResource.headers.set(API_KEY_HEADER_NAME, this.credential.key);\n    return this._nextPolicy.sendRequest(webResource);\n  }\n}\n"]}