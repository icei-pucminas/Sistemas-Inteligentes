{"version":3,"file":"models.js","sourceRoot":"","sources":["../../src/models.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EAAE,iBAAiB,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as coreHttp from \"@azure/core-http\";\n\nexport { KnownFormLanguage, KnownFormLocale } from \"./generated/models\";\n\nimport {\n  FormFieldsReport,\n  KeysResult,\n  KeyValueElement as KeyValueElementModel,\n  KeyValueType,\n  KeyValuePair as KeyValuePairModel,\n  LengthUnit,\n  ModelsSummary,\n  ModelStatus as CustomFormModelStatus,\n  TrainStatus as TrainingStatus,\n  OperationStatus,\n  ModelStatus,\n  FormReadingOrder\n} from \"./generated/models\";\n\nexport {\n  FormFieldsReport,\n  KeysResult,\n  KeyValueElementModel,\n  KeyValueType,\n  KeyValuePairModel,\n  LengthUnit,\n  ModelsSummary,\n  ModelStatus,\n  CustomFormModelStatus,\n  OperationStatus,\n  TrainingStatus,\n  FormReadingOrder\n};\n\n/**\n * Represents a point used to defined bounding boxes. The unit is either 'pixel' or 'inch', @see {@link LengthUnit}.\n */\nexport interface Point2D {\n  /**\n   * x coordinate\n   */\n  x: number;\n  /**\n   * y coordinate\n   */\n  y: number;\n}\n\n/**\n * Represents common properties of recognized form elements.\n */\nexport interface FormElementCommon {\n  /**\n   * The 1-based page number in the input document.\n   */\n  pageNumber: number;\n  /**\n   * Bounding box of a recognized word.\n   */\n  boundingBox: Point2D[];\n  /**\n   * Optional text content of the form element.\n   */\n  text?: string;\n}\n\n/**\n * Represents a recognized word.\n */\nexport interface FormWord extends FormElementCommon {\n  /**\n   * Element kind - \"word\"\n   */\n  kind: \"word\";\n  /**\n   * The text content of the word.\n   */\n  text: string;\n  /**\n   * Confidence value.\n   */\n  confidence?: number;\n}\n\n/**\n * Represents a recognized text line.\n */\nexport interface FormLine extends FormElementCommon {\n  /**\n   * Element kind - \"line\"\n   */\n  kind: \"line\";\n  /**\n   * The text content of the line.\n   */\n  text: string;\n  /**\n   * List of words in the text line.\n   */\n  words: FormWord[];\n  /**\n   * Text appearance properties, such as style.\n   */\n  appearance?: TextAppearance;\n}\n\n/**\n * Represents the appearance of a line of text in a form.\n */\nexport interface TextAppearance {\n  /**\n   * The identified style of writing, can be one of:\n   * - \"handwriting\"\n   * - \"other\"\n   */\n  styleName: \"handwriting\" | \"other\";\n  /**\n   * Confidence value.\n   */\n  styleConfidence: number;\n}\n\n/**\n * Represents a recognized selection mark.\n *\n * Selection marks include checkboxes, radio buttons, etc.\n */\nexport interface FormSelectionMark extends FormElementCommon {\n  /**\n   * Element kind - \"selectionMark\"\n   */\n  kind: \"selectionMark\";\n  /**\n   * The state of the mark, either of:\n   * - \"selected\"\n   * - \"unselected\"\n   */\n  state: \"selected\" | \"unselected\";\n  /**\n   * Confidence value.\n   */\n  confidence?: number;\n}\n\n/**\n * Information about a recognized element in the form. Examples include\n * words, lines, checkbox, etc.\n */\nexport type FormElement = FormWord | FormLine | FormSelectionMark;\n\n/**\n * Represents a cell in recognized table\n */\nexport interface FormTableCell {\n  /**\n   * Row index of the cell.\n   */\n  rowIndex: number;\n  /**\n   * Column index of the cell.\n   */\n  columnIndex: number;\n  /**\n   * Number of rows spanned by this cell.\n   */\n  rowSpan: number;\n  /**\n   * Number of columns spanned by this cell.\n   */\n  columnSpan: number;\n  /**\n   * Text content of the cell.\n   */\n  text: string;\n  /**\n   * Bounding box of the cell.\n   */\n  boundingBox: Point2D[];\n  /**\n   * Confidence value.\n   */\n  confidence: number;\n  /**\n   * When includeFieldElements is set to true, a list of references to the elements constituting this table cell.\n   */\n  fieldElements?: FormElement[];\n  /**\n   * Is the current cell a header cell?\n   */\n  isHeader: boolean;\n  /**\n   * Is the current cell a footer cell?\n   */\n  isFooter: boolean;\n  /**\n   * The 1-based page number in the input document where the table cell appears.\n   */\n  pageNumber: number;\n}\n\n/**\n * Information about the recognized table contained in a page.\n */\nexport interface FormTable {\n  /**\n   * Number of rows in the data table\n   */\n  rowCount: number;\n  /**\n   * Number of columns in the data table\n   */\n  columnCount: number;\n  /**\n   * The bounding box of the recognized table\n   *\n   * Note: This may be `undefined` for FormTables recognized from from custom models trained\n   * without labels.\n   */\n  boundingBox?: Point2D[];\n  /**\n   * List of cells in the data table\n   */\n  cells: FormTableCell[];\n  /**\n   * The 1-based page number in the input document where the table appears.\n   */\n  pageNumber: number;\n}\n\n/**\n * Represents recognized elements of label-value pairs.\n *\n * For example, \"Work Address\" is the label of \"Work Address: One Microsoft Way, Redmond, WA\"\n */\nexport interface FieldData {\n  /**\n   * The 1-based page number in the input document.\n   */\n  pageNumber: number;\n  /**\n   * The bounding box of the recognized label or value\n   */\n  boundingBox?: Point2D[];\n  /**\n   * When includeFieldElements is set to true, a list of references to the\n   * form elements that constitute this label-value pair.\n   */\n  fieldElements?: FormElement[];\n  /**\n   * The text content of the recognized label or value\n   */\n  text?: string;\n}\n\n/**\n * A field recognized within a form, represented as a tagged union of several\n * different types of form fields, all sharing some common elements.\n *\n * The `valueType` property of this object can be used to determine which\n * variation of FormField was recognized. For example, if the `valueType`\n * property is \"number\", then the FormField is a FormNumberField, and the\n * `value` property will be a `number`.\n */\nexport type FormField =\n  | FormUnknownField\n  | FormStringField\n  | FormNumberField\n  | FormDateField\n  | FormTimeField\n  | FormPhoneNumberField\n  | FormIntegerField\n  | FormSelectionMarkField\n  | FormArrayField\n  | FormObjectField\n  | FormCountryRegionField;\n\n/**\n * Fields common to all variations of FormField.\n */\nexport interface FormFieldCommon {\n  /**\n   * The sevice's confidence (expressed as a number between zero and one) in\n   * the correctness of the field value.\n   */\n  confidence?: number;\n  /**\n   * Contains the recognized field label's text, bounding box, and field elements.\n   */\n  labelData?: FieldData;\n  /**\n   * A user-defined label for the field.\n   */\n  name?: string;\n  /**\n   * Contains the recognized field value's text, bounding box, and field elements.\n   */\n  valueData?: FieldData;\n}\n\n/**\n * A catch-all form field variation with an unknown value type.\n *\n * This interface is provided for type safety and should only be encountered\n * when the `valueType` of a FormField is undefined, and there is no ordinary\n * reason that should be the case.\n */\nexport interface FormUnknownField extends FormFieldCommon {\n  /**\n   * The type of this form value value - undefined.\n   *\n   * There is no reason this should ordinarily occur, but is provided as a way\n   * to hint to the type system that if `valueType` is not known, then the type\n   * of value is `unknown`.\n   */\n  valueType?: undefined;\n  /**\n   * If `valueType` is undefined, then the type of the value is unknown.\n   */\n  value?: unknown;\n}\n\n/**\n * A form field with a string value.\n */\nexport interface FormStringField extends FormFieldCommon {\n  /**\n   * The type of this field's value - \"string\"\n   */\n  valueType: \"string\";\n  /**\n   * The value of the recognized string.\n   */\n  value?: string;\n}\n\n/**\n * A form field with a numeric value.\n */\nexport interface FormNumberField extends FormFieldCommon {\n  /**\n   * The type of this field's value - \"number\"\n   */\n  valueType: \"number\";\n  /**\n   * The value of the recognized number.\n   */\n  value?: number;\n}\n\n/**\n * A form field with a value representing a date.\n */\nexport interface FormDateField extends FormFieldCommon {\n  /**\n   * The type of this field's value - \"date\"\n   */\n  valueType: \"date\";\n  /**\n   * The value of the date field, represented as a JavaScript date object.\n   */\n  value?: Date;\n}\n\n/**\n * A form field with a value representing a time.\n */\nexport interface FormTimeField extends FormFieldCommon {\n  /**\n   * The type of this field's value - \"time\"\n   */\n  valueType: \"time\";\n  /**\n   * The value of the time field, represented as a string.\n   */\n  value?: string;\n}\n\n/**\n * A form field with a value representing a phone number.\n */\nexport interface FormPhoneNumberField extends FormFieldCommon {\n  /**\n   * The type of this field's value - \"phoneNumber\"\n   */\n  valueType: \"phoneNumber\";\n  /**\n   * The value of the recognized phone number, represented as a string.\n   *\n   * This value is normalized to a uniform string representation, e.g.\n   * \"+447911123456\". If the service is unable to normalize the value,\n   * information about the phone number's textual appearance may appear in the\n   * `text` property of the value data (see the `valueData` field of this\n   * object).\n   */\n  value?: string;\n}\n\n/**\n * A form field with an integer value.\n */\nexport interface FormIntegerField extends FormFieldCommon {\n  /**\n   * The type of this field's value - \"integer\"\n   */\n  valueType: \"integer\";\n  /**\n   * The value of the recognized integer.\n   */\n  value?: number;\n}\n\n/**\n * A form field with an array of FormFields as a value.\n */\nexport interface FormArrayField extends FormFieldCommon {\n  /**\n   * The type of this field's value - \"array\"\n   */\n  valueType: \"array\";\n  /**\n   * The recognized array of nested fields. Each value in this array is its\n   * own `FormField`.\n   */\n  value?: FormField[];\n}\n\n/**\n * A form field with a key-value map (an \"object\") as a value.\n */\nexport interface FormObjectField extends FormFieldCommon {\n  /**\n   * The type of this field's value - \"object\"\n   */\n  valueType: \"object\";\n  /**\n   * The recognized object structure of the field, represented as a JavaScript\n   * object with the nested fields' names as properties that store their\n   * values.\n   */\n  value?: Record<string, FormField>;\n}\n\n/**\n * A form field with a value representing the state of a selection mark.\n */\nexport interface FormSelectionMarkField extends FormFieldCommon {\n  /**\n   * The type of this field's value - \"selectionMark\"\n   */\n  valueType: \"selectionMark\";\n  /**\n   * The state of the recognized selection mark, represented as a string, with\n   * one of the following values:\n   *\n   * - \"selected\"\n   * - \"unselected\"\n   */\n  value?: \"selected\" | \"unselected\";\n}\n\n/**\n * A form field with a value representing an administrative region or country\n * in the world.\n */\nexport interface FormCountryRegionField extends FormFieldCommon {\n  /**\n   * The type of this field's value - \"countryRegion\"\n   */\n  valueType: \"countryRegion\";\n  /**\n   * The recognized country or region, represented by a three-letter (ISO\n   * 3166-1 alpha-3) code.\n   */\n  value?: string;\n}\n\n/**\n * Represents a Form page range\n */\nexport interface FormPageRange {\n  /**\n   * The page number of the first page in the range\n   */\n  firstPageNumber: number;\n  /**\n   * The page number of the last page in the range\n   */\n  lastPageNumber: number;\n}\n\n/**\n * Raw texts recognized from a page in the input document.\n */\nexport interface FormPage {\n  /**\n   * The 1-based page number in the input document.\n   */\n  pageNumber: number;\n  /**\n   * The general orientation of the text in clockwise direction, measured in degrees between (-180,\n   * 180].\n   */\n  textAngle: number;\n  /**\n   * The width of the image/PDF in pixels/inches, respectively.\n   */\n  width: number;\n  /**\n   * The height of the image/PDF in pixels/inches, respectively.\n   */\n  height: number;\n  /**\n   * The unit used by the width, height and boundingBox properties. For images, the unit is\n   * \"pixel\". For PDF, the unit is \"inch\". Possible values include: 'pixel', 'inch'\n   */\n  unit: LengthUnit;\n  /**\n   * When `includeFieldElements` is set to true, a list of recognized text lines. The maximum number of\n   * lines returned is 300 per page. The lines are sorted top to bottom, left to right, although in\n   * certain cases proximity is treated with higher priority. As the sorting order depends on the\n   * detected text, it may change across images and OCR version updates. Thus, business logic\n   * should be built upon the actual line location instead of order.\n   */\n  lines?: FormLine[];\n  /**\n   * List of data tables recognized in the page\n   */\n  tables?: FormTable[];\n  /**\n   * List of selection marks recognized in the page\n   */\n  selectionMarks?: FormSelectionMark[];\n}\n\n/**\n * Array of {@link FormPage}\n */\nexport interface FormPageArray extends Array<FormPage> {}\n\n/**\n * Represent recognized form consists of text fields that have semantic meanings.\n */\nexport interface RecognizedForm {\n  /**\n   * The type of the form.\n   */\n  formType: string;\n  /**\n   * Confidence in the correctness of the form type.\n   *\n   * For unlabeled models, this value will always be undefined.\n   */\n  formTypeConfidence?: number;\n  /**\n   * The model ID used to analyze the contents of this document.\n   */\n  modelId?: string;\n  /**\n   * First and last page number where the document is found.\n   */\n  pageRange: FormPageRange;\n  /**\n   * Dictionary of named field values.\n   */\n  fields: Record<string, FormField>;\n  /**\n   * Texts and tables extracted from a page in the input\n   */\n  pages: FormPage[];\n}\n\n/**\n * Array of {@link RecognizedForm}\n */\nexport interface RecognizedFormArray extends Array<RecognizedForm> {}\n\n/**\n * Properties common to the recognized text field\n */\nexport interface CommonFieldValue {\n  /**\n   * Text content of the recognized field.\n   */\n  text?: string;\n  /**\n   * Bounding box of the field value, if appropriate.\n   */\n  boundingBox?: Point2D[];\n  /**\n   * Confidence score.\n   */\n  confidence?: number;\n  /**\n   * When includeFieldElements is set to true, a list of references to the elements constituting\n   * this field.\n   */\n  fieldElements?: FormElement[];\n  /**\n   * The 1-based page number in the input document.\n   */\n  pageNumber?: number;\n}\n\n/**\n * Report for a custom model training document.\n */\nexport interface TrainingDocumentInfo {\n  /**\n   * Training document name.\n   */\n  name: string;\n  /**\n   * The model ID associated with this training document\n   */\n  modelId?: string;\n  /**\n   * Total number of pages trained.\n   */\n  pageCount: number;\n  /**\n   * List of errors.\n   */\n  errors: FormRecognizerError[];\n  /**\n   * Status of the training operation.\n   */\n  status: TrainingStatus;\n}\n\n/**\n * Optional properties of a custom form model.\n */\nexport interface CustomFormModelProperties {\n  /**\n   * Indicates whether or not the model was composed.\n   */\n  isComposedModel?: boolean;\n}\n\n/**\n * Basic custom model information.\n */\nexport interface CustomFormModelInfo {\n  /**\n   * Model identifier.\n   */\n  modelId: string;\n  /**\n   * The name of the model that was provided during model training.\n   *\n   * Model names are not guaranteed to be unique.\n   */\n  modelName?: string;\n  /**\n   * Optional properties or flags associated with the model.\n   */\n  properties?: CustomFormModelProperties;\n  /**\n   * Status of the model.\n   */\n  status: CustomFormModelStatus;\n  /**\n   * Date and time (UTC) when the custom model training started.\n   */\n  trainingStartedOn: Date;\n  /**\n   * Date and time (UTC) when the training operation completed.\n   */\n  trainingCompletedOn: Date;\n}\n\n/**\n * Information about an identified field within a model.\n */\nexport interface CustomFormModelField {\n  /**\n   * Estimated extraction accuracy for this field.\n   */\n  accuracy?: number;\n  /**\n   * Training field name.\n   */\n  name: string;\n  /**\n   * Training field label.\n   */\n  label: string | null;\n}\n\n/**\n * Represents the model for a specific type of custom form from training.\n */\nexport interface CustomFormSubmodel {\n  /**\n   * The model ID associated with this submodel.\n   */\n  modelId?: string;\n  /**\n   * Estimated extraction accuracy for this model.\n   */\n  accuracy?: number;\n  /**\n   * Form fields\n   */\n  fields: Record<string, CustomFormModelField>;\n  /**\n   * The form type associated with this submodel.\n   */\n  formType: string;\n}\n\n/**\n * Represents a model from training.\n */\nexport interface CustomFormModel extends CustomFormModelInfo {\n  /**\n   * List of document used to train the model and any errors reported for each document.\n   */\n  trainingDocuments?: TrainingDocumentInfo[];\n  /**\n   * Errors returned during training operation.\n   */\n  errors?: FormRecognizerError[];\n  /**\n   * Form models created by training.\n   */\n  submodels?: CustomFormSubmodel[];\n}\n\n/**\n * Custom model training result.\n */\nexport interface TrainResult {\n  /**\n   * List of the documents used to train the model and any errors reported in each document.\n   */\n  trainingDocuments: TrainingDocumentInfo[];\n  /**\n   * List of fields used to train the model and the train operation error reported by each.\n   */\n  fields?: FormFieldsReport[];\n  /**\n   * Average accuracy.\n   */\n  averageModelAccuracy?: number;\n  /**\n   * Errors returned during the training operation.\n   */\n  errors?: FormRecognizerError[];\n}\n\n/**\n * Response to the get custom model operation.\n */\nexport interface Model {\n  /**\n   * Basic custom model information.\n   */\n  modelInfo: CustomFormModelInfo;\n  /**\n   * Keys extracted by the custom model.\n   */\n  keys?: KeysResult;\n  /**\n   * Custom model training result.\n   */\n  trainResult?: TrainResult;\n}\n\n/**\n * Response to the list custom models operation.\n */\nexport interface Models {\n  /**\n   * Summary of all trained custom models.\n   */\n  summary?: ModelsSummary;\n  /**\n   * Collection of trained custom models.\n   */\n  modelList?: CustomFormModelInfo[];\n  /**\n   * Link to the next page of custom models.\n   */\n  nextLink?: string;\n}\n\n/**\n * Contains the response data for retrieving a model from unlabeled training.\n */\nexport type FormModelResponse = CustomFormModel & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n    /**\n     * The response body as text (string format)\n     */\n    bodyAsText: string;\n\n    /**\n     * The response body as parsed JSON or XML\n     */\n    parsedBody: Model;\n  };\n};\n\n/**\n * Contains response data for the listCustomModels operation.\n */\nexport type ListCustomModelsResponse = Models & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n    /**\n     * The response body as text (string format)\n     */\n    bodyAsText: string;\n\n    /**\n     * The response body as parsed JSON or XML\n     */\n    parsedBody: Models;\n  };\n};\n\n/**\n * Types of binary data allowed as input to recognition operations\n */\nexport type FormRecognizerRequestBody =\n  | Blob\n  | ArrayBuffer\n  | ArrayBufferView\n  | NodeJS.ReadableStream;\n\n/**\n * Summary of all models in the cognitive service account.\n */\nexport interface AccountProperties {\n  /**\n   * Current count of trained custom models.\n   */\n  customModelCount: number;\n  /**\n   * Max number of models that can be trained for this account.\n   */\n  customModelLimit: number;\n}\n\n/**\n * Represents errors from Azure Form Recognizer service\n */\nexport interface FormRecognizerError {\n  /**\n   * Error code\n   */\n  code: string;\n  /**\n   * Error message\n   */\n  message: string;\n}\n\n/**\n * Request parameter that contains authorization claims for copy operation.\n */\nexport interface CopyAuthorization {\n  /**\n   * Model identifier.\n   */\n  modelId: string;\n  /**\n   * Token claim used to authorize the copy request.\n   */\n  accessToken: string;\n  /**\n   * Target resource Id.\n   */\n  resourceId: string;\n  /**\n   * Target resource region.\n   */\n  resourceRegion: string;\n  /**\n   * The time when the access token expires.\n   */\n  expiresOn: Date;\n}\n"]}