{"version":3,"file":"DeviceCodeClient.js","sources":["../../src/client/DeviceCodeClient.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { DeviceCodeResponse, ServerDeviceCodeResponse } from \"../response/DeviceCodeResponse\";\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { CommonDeviceCodeRequest } from \"../request/CommonDeviceCodeRequest\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { Constants, GrantType } from \"../utils/Constants\";\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\n\r\n/**\r\n * OAuth2.0 Device code client\r\n */\r\nexport class DeviceCodeClient extends BaseClient {\r\n\r\n    constructor(configuration: ClientConfiguration) {\r\n        super(configuration);\r\n    }\r\n\r\n    /**\r\n     * Gets device code from device code endpoint, calls back to with device code response, and\r\n     * polls token endpoint to exchange device code for tokens\r\n     * @param request\r\n     */\r\n    public async acquireToken(request: CommonDeviceCodeRequest): Promise<AuthenticationResult | null> {\r\n        const deviceCodeResponse: DeviceCodeResponse = await this.getDeviceCode(request);\r\n        request.deviceCodeCallback(deviceCodeResponse);\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        const response: ServerAuthorizationTokenResponse = await this.acquireTokenWithDeviceCode(\r\n            request,\r\n            deviceCodeResponse);\r\n\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n\r\n        // Validate response. This function throws a server error if an error is returned by the server.\r\n        responseHandler.validateTokenResponse(response);\r\n        return await responseHandler.handleServerTokenResponse(\r\n            response,\r\n            this.authority,\r\n            reqTimestamp,\r\n            request\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Creates device code request and executes http GET\r\n     * @param request\r\n     */\r\n    private async getDeviceCode(request: CommonDeviceCodeRequest): Promise<DeviceCodeResponse> {\r\n        const queryString = this.createQueryString(request);\r\n        const headers = this.createDefaultTokenRequestHeaders();\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: request.authority,\r\n            scopes: request.scopes\r\n        };\r\n\r\n        return this.executePostRequestToDeviceCodeEndpoint(this.authority.deviceCodeEndpoint, queryString, headers, thumbprint);\r\n    }\r\n\r\n    /**\r\n     * Executes POST request to device code endpoint\r\n     * @param deviceCodeEndpoint\r\n     * @param queryString\r\n     * @param headers\r\n     */\r\n    private async executePostRequestToDeviceCodeEndpoint(\r\n        deviceCodeEndpoint: string,\r\n        queryString: string,\r\n        headers: Record<string, string>,\r\n        thumbprint: RequestThumbprint): Promise<DeviceCodeResponse> {\r\n\r\n        const {\r\n            body: {\r\n                user_code: userCode,\r\n                device_code: deviceCode,\r\n                verification_uri: verificationUri,\r\n                expires_in: expiresIn,\r\n                interval,\r\n                message\r\n            }\r\n        } = await this.networkManager.sendPostRequest<ServerDeviceCodeResponse>(\r\n            thumbprint,\r\n            deviceCodeEndpoint,\r\n            {\r\n                body: queryString,\r\n                headers: headers\r\n            });\r\n\r\n        return {\r\n            userCode,\r\n            deviceCode,\r\n            verificationUri,\r\n            expiresIn,\r\n            interval,\r\n            message\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Create device code endpoint query parameters and returns string\r\n     */\r\n    private createQueryString(request: CommonDeviceCodeRequest): string {\r\n\r\n        const parameterBuilder: RequestParameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addScopes(request.scopes);\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        if (!StringUtils.isEmpty(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * Creates token request with device code response and polls token endpoint at interval set by the device code\r\n     * response\r\n     * @param request\r\n     * @param deviceCodeResponse\r\n     */\r\n    private async acquireTokenWithDeviceCode(\r\n        request: CommonDeviceCodeRequest,\r\n        deviceCodeResponse: DeviceCodeResponse): Promise<ServerAuthorizationTokenResponse> {\r\n\r\n        const requestBody = this.createTokenRequestBody(request, deviceCodeResponse);\r\n        const headers: Record<string, string> = this.createDefaultTokenRequestHeaders();\r\n\r\n        const userSpecifiedTimeout = request.timeout ? TimeUtils.nowSeconds() + request.timeout : undefined;\r\n        const deviceCodeExpirationTime = TimeUtils.nowSeconds() + deviceCodeResponse.expiresIn;\r\n        const pollingIntervalMilli = deviceCodeResponse.interval * 1000;\r\n\r\n        /*\r\n         * Poll token endpoint while (device code is not expired AND operation has not been cancelled by\r\n         * setting CancellationToken.cancel = true). POST request is sent at interval set by pollingIntervalMilli\r\n         */\r\n        return new Promise<ServerAuthorizationTokenResponse>((resolve, reject) => {\r\n\r\n            const intervalId: ReturnType<typeof setTimeout> = setInterval(async () => {\r\n                try {\r\n                    if (request.cancel) {\r\n\r\n                        this.logger.error(\"Token request cancelled by setting DeviceCodeRequest.cancel = true\");\r\n                        clearInterval(intervalId);\r\n                        reject(ClientAuthError.createDeviceCodeCancelledError());\r\n\r\n                    } else if (userSpecifiedTimeout && userSpecifiedTimeout < deviceCodeExpirationTime && TimeUtils.nowSeconds() > userSpecifiedTimeout) {\r\n\r\n                        this.logger.error(`User defined timeout for device code polling reached. The timeout was set for ${userSpecifiedTimeout}`);\r\n                        clearInterval(intervalId);\r\n                        reject(ClientAuthError.createUserTimeoutReachedError());\r\n\r\n                    } else if (TimeUtils.nowSeconds() > deviceCodeExpirationTime) {\r\n\r\n                        if (userSpecifiedTimeout) {\r\n                            this.logger.verbose(`User specified timeout ignored as the device code has expired before the timeout elapsed. The user specified timeout was set for ${userSpecifiedTimeout}`);\r\n                        }\r\n\r\n                        this.logger.error(`Device code expired. Expiration time of device code was ${deviceCodeExpirationTime}`);\r\n                        clearInterval(intervalId);\r\n                        reject(ClientAuthError.createDeviceCodeExpiredError());\r\n\r\n                    } else {\r\n                        const thumbprint: RequestThumbprint = {\r\n                            clientId: this.config.authOptions.clientId,\r\n                            authority: request.authority,\r\n                            scopes: request.scopes\r\n                        };\r\n                        const response = await this.executePostToTokenEndpoint(\r\n                            this.authority.tokenEndpoint,\r\n                            requestBody,\r\n                            headers,\r\n                            thumbprint);\r\n\r\n                        if (response.body && response.body.error === Constants.AUTHORIZATION_PENDING) {\r\n                            // user authorization is pending. Sleep for polling interval and try again\r\n                            this.logger.info(response.body.error_description || \"no_error_description\");\r\n                        } else {\r\n                            clearInterval(intervalId);\r\n                            resolve(response.body);\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    clearInterval(intervalId);\r\n                    reject(error);\r\n                }\r\n            }, pollingIntervalMilli);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates query parameters and converts to string.\r\n     * @param request\r\n     * @param deviceCodeResponse\r\n     */\r\n    private createTokenRequestBody(request: CommonDeviceCodeRequest, deviceCodeResponse: DeviceCodeResponse): string {\r\n\r\n        const requestParameters: RequestParameterBuilder = new RequestParameterBuilder();\r\n\r\n        requestParameters.addScopes(request.scopes);\r\n        requestParameters.addClientId(this.config.authOptions.clientId);\r\n        requestParameters.addGrantType(GrantType.DEVICE_CODE_GRANT);\r\n        requestParameters.addDeviceCode(deviceCodeResponse.deviceCode);\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        requestParameters.addCorrelationId(correlationId);\r\n        requestParameters.addClientInfo();\r\n        requestParameters.addLibraryInfo(this.config.libraryInfo);\r\n        requestParameters.addThrottling();\r\n        \r\n        if (this.serverTelemetryManager) {\r\n            requestParameters.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            requestParameters.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        return requestParameters.createQueryString();\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}