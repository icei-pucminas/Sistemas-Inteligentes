export declare class Context {
    private _currentContext;
    /** The root context is used as the default parent context when there is no active context */
    static readonly ROOT_CONTEXT: Context;
    /**
     * This is another identifier to the root context which allows developers to easily search the
     * codebase for direct uses of context which need to be removed in later PRs.
     *
     * It's existence is temporary and it should be removed when all references are fixed.
     */
    static readonly TODO: Context;
    /** Get a key to uniquely identify a context value */
    static createKey(description: string): symbol;
    /**
     * Construct a new context which inherits values from an optional parent context.
     *
     * @param parentContext a context from which to inherit values
     */
    private constructor();
    /**
     * Get a value from the context.
     *
     * @param key key which identifies a context value
     */
    getValue(key: symbol): unknown;
    /**
     * Create a new context which inherits from this context and has
     * the given key set to the given value.
     *
     * @param key context key for which to set the value
     * @param value value to set for the given key
     */
    setValue(key: symbol, value: unknown): Context;
    /**
     * Return a new context which inherits from this context but does
     * not contain a value for the given key.
     *
     * @param key context key for which to clear a value
     */
    deleteValue(key: symbol): Context;
}
//# sourceMappingURL=context.d.ts.map