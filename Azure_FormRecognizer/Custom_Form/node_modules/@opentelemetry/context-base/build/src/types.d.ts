import { Context } from './context';
export interface ContextManager {
    /**
     * Get the current active context
     */
    active(): Context;
    /**
     * Run the fn callback with object set as the current active context
     * @param context Any object to set as the current active context
     * @param fn A callback to be immediately run within a specific context
     */
    with<T extends (...args: unknown[]) => ReturnType<T>>(context: Context, fn: T): ReturnType<T>;
    /**
     * Bind an object as the current context (or a specific one)
     * @param target Any object to which a context need to be set
     * @param [context] Optionally specify the context which you want to assign
     */
    bind<T>(target: T, context?: Context): T;
    /**
     * Enable context management
     */
    enable(): this;
    /**
     * Disable context management
     */
    disable(): this;
}
//# sourceMappingURL=types.d.ts.map